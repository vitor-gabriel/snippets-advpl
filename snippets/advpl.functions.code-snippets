{
    "Help": {
        "prefix": "Help",
        "body": [
            "Help(' ',1,${1:cabecalho} ,,${2:descricao},2,0,,,,,, {${3:solucao}})"
        ],
        "description": "Função de Help\nExemplo\nHELP(' ',1,'Help1' ,,'campo nao preenchido',2,0,,,,,, {'preencha o campo'})"
    },
    "Strtokarr2": {
        "prefix": "Strtokarr2",
        "body": [
            "Strtokarr2( ${1:cValue}, ${2:cToken}, ${3:lEmptyStr})"
        ],
        "description": "Strtokarr2 - Transforma uma String em um array,\n cValue := Caracter a ser separado\n cToken := Caracter a ser ultilizado na quebra \n lEmptyStr:= Se retorna elementos vazios"
    },
    "Year": {
        "prefix": "Year",
        "body": [
            "Year( ${1:dData})"
        ],
        "description": "Year - Retorna o Ano no formato 'AAAA' da data informada"
    },
    "Type": {
        "prefix": "Type",
        "body": [
            "Type( ${1:cVariavel})"
        ],
        "description": "Type() - Retorna o tipo de dado de uma expressao ou variavel."
    },
    "ValType": {
        "prefix": "ValType",
        "body": [
            "ValType( ${1:cVariavel})"
        ],
        "description": "Valtype() - Retorna o tipo de dado de uma expressao ou variavel."
    },
    "ComputerName": {
        "prefix": "ComputerName",
        "body": [
            "ComputerName()"
        ],
        "description": "ComputerName() - Retorna o nome do computador em que o SmartClient esta sendo executado"
    },
    "ConOut": {
        "prefix": "ConOut",
        "body": [
            "ConOut( ${1:cText})"
        ],
        "description": "ConOut() - Apresenta no console, do Application Server, uma mensagem."
    },
    "Decode64": {
        "prefix": "Decode64",
        "body": [
            "Decode64( ${1:cText})"
        ],
        "description": "Decode64() - Converte uma string de Base64 para Base ASCII"
    },
    "Encode64": {
        "prefix": "Encode64",
        "body": [
            "Encode64( ${1:cText})"
        ],
        "description": "Encode64() - Converte uma string de ASCII para base64"
    },
    "FindFunction": {
        "prefix": "FindFunction",
        "body": [
            "FindFunction( ${1:cFunction})"
        ],
        "description": "FindFunction() - Faz a busca de uma determinada função no rpo ou no binário"
    },
    "GetPort": {
        "prefix": "GetPort",
        "body": [
            "GetPort(${nType})"
        ],
        "description": "GetPort-Retorna o número da porta em que o servidor de aplicativos, licença, http ou https está atendendo. GetPort(<nType>)"
    },
    "SocketConn": {
        "prefix": "SocketConn",
        "body": [
            "SocketConn(${cIP},${nPort},${cReq},${1:/*nTimeOut*/})"
        ],
        "description": "SocketConn-Cria uma conexão TCP com um aplicativo de destino, por meio do uso de um Socket do sistema operacional. SocketConn(<cIP>,<nPort>,<cReq>,[nTimeOut])"
    },
    "ADUserValid": {
        "prefix": "ADUserValid",
        "body": [
            "ADUserValid(${cDomainName},${cUserName},${cPassword})"
        ],
        "description": "ADUserValid-Faz a autenticação de uma conta de usuário de um Microsoft Windows Active Directory baseado em domínio. ADUserValid(<cDomainName>,<cUserName>,<cPassword>)"
    },
    "GetAuthArgs": {
        "prefix": "GetAuthArgs",
        "body": [
            "GetAuthArgs()"
        ],
        "description": "GetAuthArgs-Recupera os parâmetros que são usados para autenticação. GetAuthArgs()"
    },
    "GetCredential": {
        "prefix": "GetCredential",
        "body": [
            "GetCredential()"
        ],
        "description": "GetCredential-Obtém a credencial do usuário, no sistema operacional, no qual está autenticado. GetCredential()"
    },
    "GetUserFromSID": {
        "prefix": "GetUserFromSID",
        "body": [
            "GetUserFromSID(${cSID},${cDomainName},${cUserName})"
        ],
        "description": "GetUserFromSID-Recupera o nome do domínio e o nome de usuário de um código no SID (Security Identifier) padrão da Microsoft que representa. GetUserFromSID(<cSID>,<cDomainName>,<cUserName>)"
    },
    "LogUserName": {
        "prefix": "LogUserName",
        "body": [
            "LogUserName()"
        ],
        "description": "LogUserName-Obtém o nome do usuário logado no sistema operacional da estação que está executando o Smart Client. LogUserName()"
    },
    "ExUserException": {
        "prefix": "ExUserException",
        "body": [
            "ExUserException(${cTexto})"
        ],
        "description": "ExUserException-Exibe os erros de registro da janela encontrados (log de erros) com a mensagem desejada e aborta a aplicação. ExUserException(<cTexto>)"
    },
    "GetPrograms": {
        "prefix": "GetPrograms",
        "body": [
            "GetPrograms()"
        ],
        "description": "GetPrograms-Retorna um array contendo o nome dos programas AdvPl carregados na memória. GetPrograms()"
    },
    "JobInfo": {
        "prefix": "JobInfo",
        "body": [
            "JobInfo()"
        ],
        "description": "JobInfo-Retorna informações sobre os trabalhos em execução no momento. JobInfo()"
    },
    "KillApp": {
        "prefix": "KillApp",
        "body": [
            "KillApp(${1|.T.,.F.,/*lKill*/|})"
        ],
        "description": "KillApp-Esta função pode ser utilizada para:\\n\\n1º - Ao chamar a função KillApp(), nenhum valor do parâmetro, o mesmo retornará se a thread recebeu uma chamada para ser encerrada.\\n\\n2º - Para passar um valor booleano no parâmetro, a função finaliza a thread na qual foi realizada a chamada da função KillApp(). KillApp([lKill])"
    },
    "KillUser": {
        "prefix": "KillUser",
        "body": [
            "KillUser(${UserName},${ComputerName},${ThreadId},${ServerName})"
        ],
        "description": "KillUser-Termina a conexão com uma sessão de um Smart Client. KillUser(<UserName>,<ComputerName>,<ThreadId>,<ServerName>)"
    },
    "LogMsg": {
        "prefix": "LogMsg",
        "body": [
            "LogMsg(${cFunc},${nFacility},${nSeverity},${nVersao},${cMsgId},${cStrData},${uMsg1},${uMsg2},${...})"
        ],
        "description": "LogMsg-Registra uma mensagem de log com as informações do sistema no formato SysLog (RFC 5424), e insere automaticamente informações como: data e hora de geração da mensagem, hostname e id da thread. LogMsg(<cFunc>,<nFacility>,<nSeverity>,<nVersao>,<cMsgId>,<cStrData>,<uMsg1>,<uMsg2>,...)"
    },
    "PCount": {
        "prefix": "PCount",
        "body": [
            "PCount()"
        ],
        "description": "PCount-Retorna o número de parâmetros passados para uma função AdvPL. PCount()"
    },
    "ProcLine": {
        "prefix": "ProcLine",
        "body": [
            "ProcLine(${1:/*nAtivacao*/})"
        ],
        "description": "ProcLine-Retorna o número da linha do código fonte, a ativação atual e a anterior. ProcLine([nAtivacao])"
    },
    "ProcName": {
        "prefix": "ProcName",
        "body": [
            "ProcName(${1:/*nAtivacao*/})"
        ],
        "description": "ProcName-Retorna o nome da rotina ou função definida pelo usuário, atual ou anterior. ProcName([nAtivacao])"
    },
    "ReleaseProgs": {
        "prefix": "ReleaseProgs",
        "body": [
            "ReleaseProgs()"
        ],
        "description": "ReleaseProgs-Desliga imediatamente o contexto dos programas do processo AdvPL atual, sem parar o processo. Significa o fechamento do contexto da limpeza do conteúdo das variáveis estáticas alocadas após a primeira execução da função na conexão e a limpeza da classe de interface dinâmica alocada pelo processo atual.  ReleaseProgs()"
    },
    "SetFinishAppHandler": {
        "prefix": "SetFinishAppHandler",
        "body": [
            "SetFinishAppHandler(${1:/*cNome_Funcao*/},${2:/*Parâmetros*/})"
        ],
        "description": "SetFinishAppHandler-Cria uma função de controle (handler) de final de programa. SetFinishAppHandler([cNome_Funcao],[Parâmetros])"
    },
    "Sleep": {
        "prefix": "Sleep",
        "body": [
            "Sleep(${nSleep})"
        ],
        "description": "Sleep-Tem como objetivo fazer com que a thread atual seja executada de acordo com o valor informado como parâmetro. Sleep(<nSleep>)"
    },
    "StartJob": {
        "prefix": "StartJob",
        "body": [
            "StartJob(${cName},${cEnv},${1|.T.,.F.,/*lWait*/|},${2:/*parm*/},${parm2},${...parm25]})"
        ],
        "description": "StartJob-Executa uma rotina em um segundo thread sem a interface. StartJob(<cName>,<cEnv>,<lWait>,[parm1,parm2,...parm25])"
    },
    "SysRefresh": {
        "prefix": "SysRefresh",
        "body": [
            "SysRefresh()"
        ],
        "description": "SysRefresh-Atualiza todas as mensagens pendentes na conexão. SysRefresh()"
    },
    "ThreadTimeout": {
        "prefix": "ThreadTimeout",
        "body": [
            "ThreadTimeout(${1:/*<segundos>*/})"
        ],
        "description": "ThreadTimeout-Quantidade de segundos para habilitar o tempo limite do encadeamento. ThreadTimeout([<segundos>])"
    },
    "UserException": {
        "prefix": "UserException",
        "body": [
            "UserException(${cDescricao})"
        ],
        "description": "UserException-Força um erro, na linguagem AdvPL, para que possa ser tratado posteriormente. Para isso, esta função recebe uma string com a descrição do erro que será exibida de acordo com o ambiente que você está executando. UserException(<cDescricao>)"
    },
    "WaitRun": {
        "prefix": "WaitRun",
        "body": [
            "WaitRun(${cExeName},${1:/*nOpc*/})"
        ],
        "description": "WaitRun-Executa e aguarda a conclusão de um programa externo (arquivo executável) através do sistema operacional da estação onde o SmartClient está sendo executado. WaitRun(<cExeName>,[nOpc])"
    },
    "Bin2D": {
        "prefix": "Bin2D",
        "body": [
            "Bin2D(${cString})"
        ],
        "description": "Bin2D-Converte um caractere em 64 bits sinalizado para um ponto flutuante numérico. Bin2D(<cString>)"
    },
    "Bin2F": {
        "prefix": "Bin2F",
        "body": [
            "Bin2F(${cString})"
        ],
        "description": "Bin2F-Converte um caractere em 32 bits sinalizado para um ponto flutuante numérico. Bin2F(<cString>)"
    },
    "Bin2I": {
        "prefix": "Bin2I",
        "body": [
            "Bin2I(${cString})"
        ],
        "description": "Bin2I-Converte um caractere de 16 bits sinalizado para um numérico. Bin2I(<cString>)"
    },
    "Bin2L": {
        "prefix": "Bin2L",
        "body": [
            "Bin2L(${cString})"
        ],
        "description": "Bin2L-Converte um caractere em 32 bits sinalizado para um numérico. Bin2L(<cString>)"
    },
    "Bin2Str": {
        "prefix": "Bin2Str",
        "body": [
            "Bin2Str(${cString})"
        ],
        "description": "Bin2Str-Converte uma string de caracteres em uma string com o valor binário de cada caractere. Bin2Str(<cString>)"
    },
    "Bin2W": {
        "prefix": "Bin2W",
        "body": [
            "Bin2W(${cString})"
        ],
        "description": "Bin2W-Converte um caractere de 16 bits não sinalizado para um numérico. Bin2W(<cString>)"
    },
    "BmpToJpg": {
        "prefix": "BmpToJpg",
        "body": [
            "BmpToJpg(${cFileOld},${cFileNew})"
        ],
        "description": "BmpToJpg-Converte uma imagem do tipo BMP (Bitmap) para JPG (Joint Photographic Group). BmpToJpg(<cFileOld>,<cFileNew>)"
    },
    "CtoD": {
        "prefix": "CtoD",
        "body": [
            "CtoD(${cData})"
        ],
        "description": "CtoD-Converte uma string formatada para o tipo data. CtoD(<cData>)"
    },
    "ColorToRGB": {
        "prefix": "ColorToRGB",
        "body": [
            "ColorToRGB(${nColor})"
        ],
        "description": "ColorToRGB-A partir do valor numérico que representa uma cor, retorna uma lista de números que representam o RGB. ColorToRGB(<nColor>)"
    },
    "D2Bin": {
        "prefix": "D2Bin",
        "body": [
            "D2Bin(${nDouble})"
        ],
        "description": "D2Bin-Converte o número inserido como parâmetro em uma string de 8 caracteres, correspondente à representação binária do número de ponto flutuante. D2Bin(<nDouble>)"
    },
    "DToC": {
        "prefix": "DToC",
        "body": [
            "DToC(${dData})"
        ],
        "description": "DToC-Converte um valor de data em uma string com o formato mês, dia e ano (mm/dd/aa). DToC(<dData>)"
    },
    "DToS": {
        "prefix": "DToS",
        "body": [
            "DToS(${dData})"
        ],
        "description": "DToS-Converte um valor de data em uma string com o formato ano, mês e dia (aaaammdd). DToS(<dData>)"
    },
    "Dbl2Dt": {
        "prefix": "Dbl2Dt",
        "body": [
            "Dbl2Dt(${nDt})"
        ],
        "description": "Dbl2Dt-Converte uma Data no duplo (ponto flutuante decimal) para data no formato \"AAAAMMDD hh:mm:ss.fff\". Dbl2Dt(<nDt>)"
    },
    "Dt2Dbl": {
        "prefix": "Dt2Dbl",
        "body": [
            "Dt2Dbl(${cExp})"
        ],
        "description": "Dt2Dbl-Converte uma data no formato \"AAAAMMDD hh:mm:ss.fff\" para um duplo (ponto flutuante decimal). Dt2Dbl(<cExp>)"
    },
    "F2Bin": {
        "prefix": "F2Bin",
        "body": [
            "F2Bin(${nFloat})"
        ],
        "description": "F2Bin-Converte o número inserido como parâmetro em uma string de 4 caracteres correspondente à representação binária do número de ponto flutuante. F2Bin(<nFloat>)"
    },
    "GetDtoDate": {
        "prefix": "GetDtoDate",
        "body": [
            "GetDtoDate(${cData})"
        ],
        "description": "GetDtoDate-Converte uma string para o tipo de data. GetDtoDate(<cData>)"
    },
    "I2Bin": {
        "prefix": "I2Bin",
        "body": [
            "I2Bin(${nInt})"
        ],
        "description": "I2Bin-Converte um inteiro em uma string formatada como um inteiro de 16 bits. I2Bin(<nInt>)"
    },
    "L2Bin": {
        "prefix": "L2Bin",
        "body": [
            "L2Bin(${nInt})"
        ],
        "description": "L2Bin-Converte um inteiro em uma string formatada como um inteiro de 32 bits. L2Bin(<nInt>)"
    },
    "SToD": {
        "prefix": "SToD",
        "body": [
            "SToD(${cData})"
        ],
        "description": "SToD-Retorna a data de uma string de oito caracteres, no formato ano, mês e dia (aaaammdd). SToD(<cData>)"
    },
    "Str": {
        "prefix": "Str",
        "body": [
            "Str(${nNumero},${1:/*nTamanho*/},${2:/*nDecimais*/})"
        ],
        "description": "Str--A partir de um numérico esta função retorna uma string formatada inserindo espaços (\" \") à esquerda e/ou o símbolo da vírgula (\".\") em suas casas, conforme a informação do parâmetro. Str(<nNumero>,[nTamanho],[nDecimais])"
    },
    "StrZero": {
        "prefix": "StrZero",
        "body": [
            "StrZero(${nValor},${nTamanho},${1:/*nDecimal*/})"
        ],
        "description": "StrZero-A partir de um numérico esta função retorna uma string formatada, inserindo zeros à esquerda e/ou o símbolo decimal (\".\") em suas casas, de acordo com as informações do parâmetro. StrZero(<nValor>,<nTamanho>,[nDecimal])"
    },
    "Val": {
        "prefix": "Val",
        "body": [
            "Val(${cString})"
        ],
        "description": "Val-Converte uma string contendo dígitos em um valor numérico. Val(<cString>)"
    },
    "W2Bin": {
        "prefix": "W2Bin",
        "body": [
            "W2Bin(${nInt})"
        ],
        "description": "W2Bin-Converte um inteiro em uma string formatada como um inteiro de 16 bits não sinalizado. W2Bin(<nInt>)"
    },
    "cValToChar": {
        "prefix": "cValToChar",
        "body": [
            "cValToChar(${xParametro})"
        ],
        "description": "cValToChar-Converte uma informação do tipo caractere, data, lógica ou numérica em string sem adicionar espaços nas informações. cValToChar(<xParametro>)"
    },
    "DEC_ADD": {
        "prefix": "DEC_ADD",
        "body": [
            "DEC_ADD(${dLeft},${dRight})"
        ],
        "description": "DEC_ADD-Feito a soma das casas decimais especificadas nos parâmetros <dLeft> e <dRight>, e retorna um novo decimal com o valor do resultado. DEC_ADD(<dLeft>,<dRight>)"
    },
    "DEC_CREATE": {
        "prefix": "DEC_CREATE",
        "body": [
            "DEC_CREATE(${xValue},${iPrecision},${iScale})"
        ],
        "description": "DEC_CREATE-Esta função permite criar um decimal com o valor inicial, a precisão e a escala especificadas. DEC_CREATE(<xValue>,<iPrecision>,<iScale>)"
    },
    "DEC_DIV": {
        "prefix": "DEC_DIV",
        "body": [
            "DEC_DIV(${dLeft},${dRight})"
        ],
        "description": "DEC_DIV-Executa a divisão de ponto fixo decimal. DEC_DIV(<dLeft>,<dRight>)"
    },
    "DEC_MOD": {
        "prefix": "DEC_MOD",
        "body": [
            "DEC_MOD(${dLeft},${dRight})"
        ],
        "description": "DEC_MOD-Retorna o resto da divisão do ponto fixo decimal. DEC_MOD(<dLeft>,<dRight>)"
    },
    "DEC_MUL": {
        "prefix": "DEC_MUL",
        "body": [
            "DEC_MUL(${dLeft},${dRight})"
        ],
        "description": "DEC_MUL-Executa a multiplicação de ponto fixo decimal. DEC_MUL(<dLeft>,<dRight>)"
    },
    "DEC_POW": {
        "prefix": "DEC_POW",
        "body": [
            "DEC_POW(${dLeft},${dRight})"
        ],
        "description": "DEC_POW-Retorna a habilitação do ponto fixo decimal. DEC_POW(<dLeft>,<dRight>)"
    },
    "DEC_RESCALE": {
        "prefix": "DEC_RESCALE",
        "body": [
            "DEC_RESCALE(${dNum},${nScale},${1:/*nRound*/})"
        ],
        "description": "DEC_RESCALE-Executa uma reescala de um ponto fixo decimal. DEC_RESCALE(<dNum>,<nScale>,[nRound])"
    },
    "DEC_RESIZE": {
        "prefix": "DEC_RESIZE",
        "body": [
            "DEC_RESIZE(${dNum},${nPrecision},${nScale},${1:/*nRound*/})"
        ],
        "description": "DEC_RESIZE-Permite alterar a precisão e a escala de um ponto fixo decimal. DEC_RESIZE(<dNum>,<nPrecision>,<nScale>,[nRound])"
    },
    "DEC_ROUND": {
        "prefix": "DEC_ROUND",
        "body": [
            "DEC_ROUND(${dNum},${nRound})"
        ],
        "description": "DEC_ROUND-Arredonda um ponto decimal fixo sem alterar a quantidade de dígitos no total ou a quantidade de casas decimais. DEC_ROUND(<dNum>,<nRound>)"
    },
    "DEC_SUB": {
        "prefix": "DEC_SUB",
        "body": [
            "DEC_SUB(${dLeft},${dRight})"
        ],
        "description": "DEC_SUB-Executa a subtração do ponto fixo decimal. DEC_SUB(<dLeft>,<dRight>)"
    },
    "DEC_TO_DBL": {
        "prefix": "DEC_TO_DBL",
        "body": [
            "DEC_TO_DBL(${dVar})"
        ],
        "description": "DEC_TO_DBL-Retorna o resultado da conversão de um tipo DECIMAL para NUMERIC. DEC_TO_DBL(<dVar>)"
    },
    "IPCCount": {
        "prefix": "IPCCount",
        "body": [
            "IPCCount(${cSemaforo})"
        ],
        "description": "IPCCount-Obtém todos os threads que estão no ar, em um determinado ambiente e retorna um inteiro indicando o número total de threads livres. IPCCount(<cSemaforo>)"
    },
    "IPCGo": {
        "prefix": "IPCGo",
        "body": [
            "IPCGo(${cSemaforo})"
        ],
        "description": "IPCGo-Envia uma chamada para uma thread, que não precisa necessariamente ser do mesmo ambiente, que está em espera. IPCGo(<cSemaforo>)"
    },
    "IPCWaitEx": {
        "prefix": "IPCWaitEx",
        "body": [
            "IPCWaitEx(${cSemaforo},${nTimeOut})"
        ],
        "description": "IPCWaitEx-Coloque em standby a thread que está rodando, criando um semáforo nomeado, e aguarda um determinado período de tempo até a liberação deste semáforo. A liberação do semáforo pode ocorrer por timeout, ou através da chamada da função IPCGo() por outro processo, utilizando como parâmetro o nome do semáforo nomeado criado por IPCWaitEx(). Além disso, a função de semáforo de lançamento IPCGo() você pode enviar parâmetros adicionais, recuperados pela função IPCWaitEx(). IPCWaitEx(<cSemaforo>,<nTimeOut>)"
    },
    "FWFilterRelation": {
        "prefix": "FWFilterRelation",
        "body": [
            "FWFilterRelation()"
        ],
        "description": "FWFilterRelation-\nPermite definir as relações para o filtro.  FWFilterRelation()"
    },
    "GetComputerName": {
        "prefix": "GetComputerName",
        "body": [
            "GetComputerName()"
        ],
        "description": "GetComputerName-Retorna o nome da máquina (Hostname) onde o SmartClient está sendo executado. GetComputerName()"
    },
    "AppBringToFront": {
        "prefix": "AppBringToFront",
        "body": [
            "AppBringToFront()"
        ],
        "description": "AppBringToFront-Permite que um diálogo rodando no Smart Client fique em primeiro plano, ou seja, acima de todos os outros aplicativos que estão rodando na estação de trabalho. AppBringToFront()"
    },
    "CalcFieldSize": {
        "prefix": "CalcFieldSize",
        "body": [
            "CalcFieldSize(${1:/*cTipo*/},${2:/*nTaman*/},${3:/*nDecimal*/},${4:/*cPicture*/},${5:/*cTitulo*/},${6:/*oFont*/})"
        ],
        "description": "CalcFieldSize-Calcula o tamanho do pixel da área ocupada pelo objeto TSay/TGet na área de edição. CalcFieldSize([cTipo],[nTaman],[nDecimal],[cPicture],[cTitulo],[oFont])"
    },
    "ChkBmpRlt": {
        "prefix": "ChkBmpRlt",
        "body": [
            "ChkBmpRlt(${cFile})"
        ],
        "description": "ChkBmpRlt-Verifica se o arquivo de imagem existe. ChkBmpRlt(<cFile>)"
    },
    "CreateSession": {
        "prefix": "CreateSession",
        "body": [
            "CreateSession(${cThead},${oWorkSpace},${cFunction},${1:/*cArg1*/},${2:/*cArg2*/},${3:/*cArg3*/},${4:/*cArg4*/},${5:/*cArg5*/},${6:/*cArg6*/},${7:/*cArg7*/},${8:/*cArg8*/},${9:/*cArg9*/},${*:/*cArg10*/},${*:/*cArg11*/},${*:/*cArg12*/},${*:/*cArg13*/},${*:/*cArg14*/},${*:/*cArg15*/},${*:/*cArg16*/},${*:/*cArg17*/},${*:/*cArg18*/},${*:/*cArg19*/},${*:/*cArg20*/})"
        ],
        "description": "CreateSession-Executa dois programas, escritos na linguagem AdvPL, ao mesmo tempo. CreateSession(<cThead>,<oWorkSpace>,<cFunction>,[cArg1],[cArg2],[cArg3],[cArg4],[cArg5],[cArg6],[cArg7],[cArg8],[cArg9],[cArg10],[cArg11],[cArg12],[cArg13],[cArg14],[cArg15],[cArg16],[cArg17],[cArg18],[cArg19],[cArg20])"
    },
    "CursorArrow": {
        "prefix": "CursorArrow",
        "body": [
            "CursorArrow()"
        ],
        "description": "CursorArrow-Define o ponteiro do mouse como a seta. CursorArrow()"
    },
    "CursorWait": {
        "prefix": "CursorWait",
        "body": [
            "CursorWait()"
        ],
        "description": "CursorWait-Sdefine o ponteiro do mouse para a ampulheta. CursorWait()"
    },
    "ExeDLLRun2": {
        "prefix": "ExeDLLRun2",
        "body": [
            "ExeDLLRun2(${nHandle},${nOpc},${cBuffer})"
        ],
        "description": "ExeDLLRun2-Executa funções ou procedimentos em uma DLL (Dynamic-link library , or link Library dynamic). ExeDLLRun2(<nHandle>,<nOpc>,<cBuffer>)"
    },
    "ExeDLLRun3": {
        "prefix": "ExeDLLRun3",
        "body": [
            "ExeDLLRun3(${nHandle},${nOpc},${cBuffer})"
        ],
        "description": "ExeDLLRun3-Executa funções ou procedimentos em uma DLL (Dynamic-link library , or link Library dynamic). ExeDLLRun3(<nHandle>,<nOpc>,<cBuffer>)"
    },
    "ExecInClient": {
        "prefix": "ExecInClient",
        "body": [
            "ExecInClient()"
        ],
        "description": "ExecInClient-Executa um conjunto de ações pré-definidas no Smart Client, como tratamentos específicos para cada sistema operacional (Windows/Linux). ExecInClient()"
    },
    "ExecInDllClose": {
        "prefix": "ExecInDllClose",
        "body": [
            "ExecInDllClose(${nHandle})"
        ],
        "description": "ExecInDllClose-Fecha a conexão com uma DLL (Dynamic-link library , or link Library dynamic). ExecInDllClose(<nHandle>)"
    },
    "ExecInDllOpen": {
        "prefix": "ExecInDllOpen",
        "body": [
            "ExecInDllOpen(${cDLLName})"
        ],
        "description": "ExecInDllOpen-Abre uma DLL (Dynamic-link library , ou Biblioteca de vinculo dinâmica) para executar functions ou procedures. ExecInDllOpen(<cDLLName>)"
    },
    "ExecInDllRun": {
        "prefix": "ExecInDllRun",
        "body": [
            "ExecInDllRun(${nHandle},${nOpc},${cStrInput})"
        ],
        "description": "ExecInDllRun-Executa uma função com nome pré-determinado em uma DLL (Dynamic-link library , ou Biblioteca de vinculo dinâmica).  ExecInDllRun(<nHandle>,<nOpc>,<cStrInput>)"
    },
    "GetChildCt": {
        "prefix": "GetChildCt",
        "body": [
            "GetChildCt(${oWindow})"
        ],
        "description": "GetChildCt-GetChildCt retorna o número de objetos filho presentes em uma janela. GetChildCt(<oWindow>)"
    },
    "MSCalculator": {
        "prefix": "MSCalculator",
        "body": [
            "MSCalculator()"
        ],
        "description": "MSCalculator-Execute o programa de calculadora do sistema operacional. MSCalculator()"
    },
    "MessageBox": {
        "prefix": "MessageBox",
        "body": [
            "MessageBox(${cMensagem},${cCabec},${nOpc})"
        ],
        "description": "MessageBox-Exibe uma janela com opção de mensagem. MessageBox(<cMensagem>,<cCabec>,<nOpc>)"
    },
    "MsgInfo": {
        "prefix": "MsgInfo",
        "body": [
            "MsgInfo(${cMensagem},${cTitulo})"
        ],
        "description": "MsgInfo-Exibe uma mensagem informativa. MsgInfo(<cMensagem>,<cTitulo>)"
    },
    "MsgNoYes": {
        "prefix": "MsgNoYes",
        "body": [
            "MsgNoYes(${cPergunta},${cTitulo})"
        ],
        "description": "MsgNoYes-Exibe uma mensagem com as opções de Não e Sim. MsgNoYes(<cPergunta>,<cTitulo>)"
    },
    "MsgRetryCal": {
        "prefix": "MsgRetryCal",
        "body": [
            "MsgRetryCal(${cPergunta},${cTitulo})"
        ],
        "description": "MsgRetryCal-Exibe uma mensagem com as opções de Sim e Não. MsgRetryCal(<cPergunta>,<cTitulo>)"
    },
    "MsgRun": {
        "prefix": "MsgRun",
        "body": [
            "MsgRun(${cText},${1:/*cHeader*/},${2:/*bBlock*/})"
        ],
        "description": "MsgRun-Exibe uma janela com uma mensagem durante o processamento. MsgRun(<cText>,[cHeader],[bBlock])"
    },
    "PtGetTheme": {
        "prefix": "PtGetTheme",
        "body": [
            "PtGetTheme()"
        ],
        "description": "PtGetTheme-Retorna o assunto definido para o Smart Client. PtGetTheme()"
    },
    "PtSetAcento": {
        "prefix": "PtSetAcento",
        "body": [
            "PtSetAcento(${1|.T.,.F.,/*lsAcento*/|})"
        ],
        "description": "PtSetAcento-Ele define o uso de caracteres acentuados no Smart Client. PtSetAcento(<lsAcento>)"
    },
    "PtSetTheme": {
        "prefix": "PtSetTheme",
        "body": [
            "PtSetTheme(${cTema})"
        ],
        "description": "PtSetTheme-Define o tema para a seção do Smart Client. PtSetTheme(<cTema>)"
    },
    "SendToFore": {
        "prefix": "SendToFore",
        "body": [
            "SendToFore()"
        ],
        "description": "SendToFore-Permite uma caixa de diálogo em execução, no SmartClient, você ficará em primeiro plano, ou seja, acima de todos os outros aplicativos que estão sendo executados na estação de trabalho. SendToFore()"
    },
    "SetDefCaption": {
        "prefix": "SetDefCaption",
        "body": [
            "SetDefCaption(${cTitle})"
        ],
        "description": "SetDefCaption-Define o título padrão da janela do aplicativo. SetDefCaption(<cTitle>)"
    },
    "SetDefFont": {
        "prefix": "SetDefFont",
        "body": [
            "SetDefFont()"
        ],
        "description": "SetDefFont-Define a fonte padrão para o Smart Client. SetDefFont()"
    },
    "SetFlatControls": {
        "prefix": "SetFlatControls",
        "body": [
            "SetFlatControls(${1|.T.,.F.,/*lOpc*/|})"
        ],
        "description": "SetFlatControls-Define se os objetos serão criados com o tema Flat. SetFlatControls(<lOpc>)"
    },
    "SetFocus": {
        "prefix": "SetFocus",
        "body": [
            "SetFocus(${1:/*nHandle*/})"
        ],
        "description": "SetFocus-Define o foco do aplicativo em um determinado objeto. SetFocus([nHandle])"
    },
    "SetRmtDate": {
        "prefix": "SetRmtDate",
        "body": [
            "SetRmtDate(${dData})"
        ],
        "description": "SetRmtDate-Define e data atual no Smart Client. SetRmtDate(<dData>)"
    },
    "SetTransparentColor": {
        "prefix": "SetTransparentColor",
        "body": [
            "SetTransparentColor(${nColor},${nAlpha})"
        ],
        "description": "SetTransparentColor-Calcula a transparência de uma cor. SetTransparentColor(<nColor>,<nAlpha>)"
    },
    "SetWndDefault": {
        "prefix": "SetWndDefault",
        "body": [
            "SetWndDefault(${1:/*oWndDef*/})"
        ],
        "description": "SetWndDefault-Define a janela padrão do aplicativo. SetWndDefault([oWndDef])"
    },
    "ShowHelpCpo": {
        "prefix": "ShowHelpCpo",
        "body": [
            "ShowHelpCpo(${1:/*cCabec*/},${2:/*aAjuda*/},${3:/*nLinAjuda*/},${4:/*aValid*/},${5:/*nLinValid*/})"
        ],
        "description": "ShowHelpCpo-Exibe a mensagem de ajuda para o campo. ShowHelpCpo([cCabec],[aAjuda],[nLinAjuda],[aValid],[nLinValid])"
    },
    "ShowHelpDlg": {
        "prefix": "ShowHelpDlg",
        "body": [
            "ShowHelpDlg(${1:/*cCabec*/},${2:/*aProbl*/},${3:/*nLinProbl*/},${4:/*aSolucao*/},${5:/*nLinSoluc*/})"
        ],
        "description": "ShowHelpDlg-Exibe a mensagem de ajuda do sistema. ShowHelpDlg([cCabec],[aProbl],[nLinProbl],[aSolucao],[nLinSoluc])"
    },
    "WinExec": {
        "prefix": "WinExec",
        "body": [
            "WinExec(${cExec})"
        ],
        "description": "WinExec-Execute um aplicativo externo na estação onde o SmartClient está sendo executado. WinExec(<cExec>)"
    },
    
    "HTTPCTDisp": {
        "prefix": "HTTPCTDisp",
        "body": [
            "HTTPCTDisp()"
        ],
        "description": "HTTPCTDisp-Fornece informações sobre como exibir uma mensagem ou parte de um pacote. HTTPCTDisp()"
    },
    "HTTPCTLen": {
        "prefix": "HTTPCTLen",
        "body": [
            "HTTPCTLen(${1:/*nTamanho*/})"
        ],
        "description": "HTTPCTLen-Indica o tamanho do pacote HTTP - o HyperText Transfer Protocol (Hypertext Transfer Protocol) que será enviado ao navegador, de acordo com uma solicitação realizada pelo navegador. HTTPCTLen([nTamanho])"
    },
    "HTTPCTType": {
        "prefix": "HTTPCTType",
        "body": [
            "HTTPCTType(${1:/*cType*/})"
        ],
        "description": "HTTPCTType-Indica o tipo de pacote HTTP - o HyperText Transfer Protocol (Hypertext Transfer Protocol), que será retornado para uma determinada solicitação HTTP. HTTPCTType([cType])"
    },
    "HTTPExitProc": {
        "prefix": "HTTPExitProc",
        "body": [
            "HTTPExitProc(${cFunction})"
        ],
        "description": "HTTPExitProc-Seta uma função que será chamada quando uma sessão HTTP for encerrada por tempo limite. HTTPExitProc(<cFunction>)"
    },
    "HTTPFreeSession": {
        "prefix": "HTTPFreeSession",
        "body": [
            "HTTPFreeSession()"
        ],
        "description": "HTTPFreeSession-Elimina memória do servidor de aplicação todas as variáveis de sessão do usuário atual. HTTPFreeSession()"
    },
    "HttpGet": {
        "prefix": "HttpGet",
        "body": [
            "HttpGet(${cUrl},${1:/*cGetParms*/},${2:/*nTimeOut*/},${3:/*aHeadStr*/},@${4:/*cHeaderGet*/})"
        ],
        "description": "HttpGet-Permite emular um cliente HTTP - Hypertext Transfer Protocol, através de uma função da linguagem AdvPL, acessando um determinado documento HTML, publicado em um servidor Web, utilizando o método GET, permitindo passar parâmetros via URL e aguardando um determinado tempo (tempo limite) para uma resposta do servidor solicitado. HttpGet(<cUrl>,[cGetParms],[nTimeOut],[aHeadStr],[@cHeaderGet])"
    },
    "HTTPGetPart": {
        "prefix": "HTTPGetPart",
        "body": [
            "HTTPGetPart()"
        ],
        "description": "HTTPGetPart-Retorna se o envio de conteúdo parcial para o navegador está habilitado ou não. HTTPGetPart()"
    },
    "HTTPGetStatus": {
        "prefix": "HTTPGetStatus",
        "body": [
            "HTTPGetStatus(@${cError},@${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HTTPGetStatus-Retorna o status da conexão de HTTP - a solicitação HyperText Transfer Protocol (Hypertext Transfer Protocol). HTTPGetStatus(<@cError>,[lClient])"
    },
    "HTTPIsAPW": {
        "prefix": "HTTPIsAPW",
        "body": [
            "HTTPIsAPW()"
        ],
        "description": "HTTPIsAPW-Informa se o ambiente WEB - a World Wide Web em tempo de execução é um APW - Programa Avançado da Web. HTTPIsAPW()"
    },
    "HTTPIsConnected": {
        "prefix": "HTTPIsConnected",
        "body": [
            "HTTPIsConnected()"
        ],
        "description": "HTTPIsConnected-Informa se o navegador está conectado aguardando resposta do Application Server. HTTPIsConnected()"
    },
    "HTTPLeaveSession": {
        "prefix": "HTTPLeaveSession",
        "body": [
            "HTTPLeaveSession()"
        ],
        "description": "HTTPLeaveSession-Libera o processamento da solicitação de atualização do conteúdo de variáveis, do tipo HTTPSession, solicitações de consulta e/ou atualizações simultâneas para o usuário atual. HTTPLeaveSession()"
    },
    "HTTPLogonUser": {
        "prefix": "HTTPLogonUser",
        "body": [
            "HTTPLogonUser()"
        ],
        "description": "HTTPLogonUser-Obtém o login do usuário atual, quando você utiliza o Servidor Protheus Avançado (ISAPI advplIsapi.dll) em conjunto com o Microsoft IIS - Internet Information Services. HTTPLogonUser()"
    },
    "HTTPOtherContent": {
        "prefix": "HTTPOtherContent",
        "body": [
            "HTTPOtherContent()"
        ],
        "description": "HTTPOtherContent-Retorna o conteúdo do pacote, o HTML recebido. HTTPOtherContent()"
    },
    "HttpPost": {
        "prefix": "HttpPost",
        "body": [
            "HttpPost(${cUrl},${1:/*cGetParms*/},${2:/*cPostParms*/},${3:/*nTimeOut*/},${4:/*aHeadStr*/},@${5:/*cHeaderGet*/})"
        ],
        "description": "HttpPost-Permite emular um cliente HTTP - Hypertext Transfer Protocol, via AdvPL, postando um bloco de informações para uma determinada URL em um servidor Web, utilizando o método POST, permitindo passar parâmetros adicionais via URL e aguardando um determinado tempo ( tempo limite) para uma resposta do servidor solicitado. HttpPost(<cUrl>,[cGetParms],[cPostParms],[nTimeOut],[aHeadStr],[@cHeaderGet])"
    },
    "HTTPPostXml": {
        "prefix": "HTTPPostXml",
        "body": [
            "HTTPPostXml(${cURL},${1:/*cParam*/},${cFile},${nTimeOut})"
        ],
        "description": "HTTPPostXml-Permite emular um cliente HTTP - HyperText Transfer Protocol (Hypertext Transfer Protocol) através de uma função AdvPL - Advanced Protheus Language. HTTPPostXml(<cURL>,[cParam],<cFile>,<nTimeOut>)"
    },
    "HTTPPragma": {
        "prefix": "HTTPPragma",
        "body": [
            "HTTPPragma(${cPragma})"
        ],
        "description": "HTTPPragma-Redefine a tag PRAGMA, header reset request HTTP - HyperText Transfer Protocol (Hypertext Transfer Protocol), sobrepondo a definição padrão do retorno PRAGMA, opcionalmente, definido na configuração do host HTTP no arquivo de configuração do Application Server. HTTPPragma(<cPragma>)"
    },
    "HTTPQuote": {
        "prefix": "HTTPQuote",
        "body": [
            "HTTPQuote(${cUrl},${cMethod},${1:/*cGETParms*/},${2:/*cPOSTParms*/},${3:/*nTimeOut*/},${4:/*aHeadStr*/},@${5:/*cHeaderRet*/})"
        ],
        "description": "HTTPQuote-Permite a emulação de um cliente HTTP através de uma função AdvPL, na qual o método HTTP é informado ao papel, postando um bloco de informações para um determinado documento publicado em um servidor Web, permitindo passar parâmetros adicionais via URL e aguardando um determinado tempo (tempo limite) para uma resposta do servidor solicitado. HTTPQuote(<cUrl>,<cMethod>,[cGETParms],[cPOSTParms],[nTimeOut],[aHeadStr],[@cHeaderRet])"
    },
    "HTTPRCTDisp": {
        "prefix": "HTTPRCTDisp",
        "body": [
            "HTTPRCTDisp()"
        ],
        "description": "HTTPRCTDisp-Retorna o identificador de conteúdo para o cabeçalho de disposição de conteúdo, HTTP, quando usado em um thread montado e/ou inicializado para atender à solicitação HTTP - HyperText Transfer Protocol (Hypertext Transfer Protocol) (.APL, .APW). HTTPRCTDisp()"
    },
    "HTTPRCTLen": {
        "prefix": "HTTPRCTLen",
        "body": [
            "HTTPRCTLen()"
        ],
        "description": "HTTPRCTLen-Retorna o identificador de conteúdo para o cabeçalho Content-length, HTTP - HyperText Transfer Protocol (Hypertext Transfer Protocol), como dados numéricos, quando usado em um thread montado e/ou inicializado para atender a uma solicitação (HTTP.APL, .APW ). HTTPRCTLen()"
    },
    "HTTPRCTType": {
        "prefix": "HTTPRCTType",
        "body": [
            "HTTPRCTType()"
        ],
        "description": "HTTPRCTType-Retorna o identificador de conteúdo para o cabeçalho do tipo de conteúdo, HTTP, quando usado em um thread montado e/ou inicializado para atender a uma solicitação (HTTP.APL, .APW). HTTPRCTType()"
    },
    "HTTPSGet": {
        "prefix": "HTTPSGet",
        "body": [
            "HTTPSGet(${cURL},${cCertificate},${cPrivKey},${cPassword},${2:/*cGETParms*/},${3:/*nTimeOut*/},${4:/*aHeadStr*/},@${5:/*cHeaderRet*/},@${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HTTPSGet-Permite emular um cliente HTTP - Hypertext Transfer Protocol, utilizando o protocolo HTTPS através de uma função AdvPL, postando um bloco de informações para um determinado documento publicado em um servidor Web, utilizando o método GET, permitindo passar parâmetros adicionais via URL e aguardando por um determinado tempo (tempo limite) para uma resposta do servidor solicitado. HTTPSGet(<cURL>,<cCertificate>,<cPrivKey>,<cPassword>,[cGETParms],[nTimeOut],[aHeadStr],[@cHeaderRet],[lClient])"
    },
    "HTTPSPost": {
        "prefix": "HTTPSPost",
        "body": [
            "HTTPSPost(${cURL},${cCertificate},${cPrivKey},${cPassword},${2:/*cGETParms*/},${3:/*cPOSTParms*/},${4:/*nTimeOut*/},${5:/*aHeadStr*/},@${6:/*cHeaderRet*/},@${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HTTPSPost-Permite emular um cliente HTTP - Hypertext Transfer Protocol, utilizando o protocolo HTTPS através de uma função AdvPL, postando um bloco de informações para um determinado documento publicado em um servidor Web, utilizando o método POST, permitindo passar parâmetros adicionais via URL e aguardando por um determinado tempo (tempo limite) para uma resposta do servidor solicitado. HTTPSPost(<cURL>,<cCertificate>,<cPrivKey>,<cPassword>,[cGETParms],[cPOSTParms],[nTimeOut],[aHeadStr],[@cHeaderRet],[lClient])"
    },
    "HTTPSend": {
        "prefix": "HTTPSend",
        "body": [
            "HTTPSend(${cHtmlSend})"
        ],
        "description": "HTTPSend-Retorna uma string de HTML - a Hypertext Markup Language para um navegador durante o processamento de uma requisição feita através de um link APW - Advanced Program Web, utilizando as Threads de Trabalho durante o processamento. HTTPSend(<cHtmlSend>)"
    },
    "HTTPSetPart": {
        "prefix": "HTTPSetPart",
        "body": [
            "HTTPSetPart(${1|.T.,.F.,/*lHttpSend*/|})"
        ],
        "description": "HTTPSetPart-Habilita/Desabilita o envio de HTML parcial - a HyperText Markup Language.HTTPSetPart(<lHttpSend>)"
    },
    "HTTPSetPass": {
        "prefix": "HTTPSetPass",
        "body": [
            "HTTPSetPass(${cUser},${cPass},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HTTPSetPass-Define o usuário e a senha para autenticação HTTP. HTTPSetPass(<cUser>,<cPass>,[lClient])"
    },
    "HttpCache": {
        "prefix": "HttpCache",
        "body": [
            "HttpCache(${cCacheControl})"
        ],
        "description": "HttpCache-Redefinir a tag Cache Control no cabeçalho de resposta da solicitação HTTP - HyperText Transfer Protocol (Hypertext Transfer Protocol), sobrepondo a definição padrão de retorno que está definida na configuração do Host HTTP, no arquivo de configuração, no servidor de aplicação (Application Server). HttpCache(<cCacheControl>)"
    },
    "HttpCountSession": {
        "prefix": "HttpCountSession",
        "body": [
            "HttpCountSession()"
        ],
        "description": "HttpCountSession-Retorna o número total de sessões (sessões HTTP) ativas no Application Server. HttpCountSession()"
    },
    "HttpSRCode": {
        "prefix": "HttpSRCode",
        "body": [
            "HttpSRCode(${nCode},${cReason})"
        ],
        "description": "HttpSRCode-Permite alterar o status do código de retorno da string de requisição HTTP e o retorno suplementar, para execuções de aplicações Advpl via links .APL e/ou .APW. HttpSRCode(<nCode>,<cReason>)"
    },
    "SetNoProxyFor": {
        "prefix": "SetNoProxyFor",
        "body": [
            "SetNoProxyFor(${cDomainList},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "SetNoProxyFor-Configure uma lista de domínios ou IPs que não devem usar proxy. SetNoProxyFor(<cDomainList>,[lClient])"
    },
    "SetProxy": {
        "prefix": "SetProxy",
        "body": [
            "SetProxy(${cServer},${nPort},${2:/*cUser*/},${3:/*cPass*/},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "SetProxy-Define as configurações para usar o proxy HTTP. SetProxy(<cServer>,<nPort>,[cUser],[cPass],[lClient])"
    },
    "DeleteKeyIni": {
        "prefix": "DeleteKeyIni",
        "body": [
            "DeleteKeyIni( ${cSecTION}, ${cKey}, ${cIniFile})"
        ],
        "description": "DeleteKeyIni-Exclui a chave de uma seção específica do arquivo de configuração (*.INI). DeleteKeyIni( ${cSecTION}, ${cKey}, ${cIniFile})"
    },
    "DeleteSectionIni": {
        "prefix": "DeleteSectionIni",
        "body": [
            "DeleteSectionIni( ${cSecTION}, ${cIniFile})"
        ],
        "description": "DeleteSectionIni-Exclui uma determinada seção do arquivo de configuração (*.INI). DeleteSectionIni( <cSecTION>, <cIniFile>)"
    },
    "GetINISessions": {
        "prefix": "GetINISessions",
        "body": [
            "GetINISessions(${cIni},${1:/*uParam1*/})"
        ],
        "description": "GetINISessions-Retorna um array com os nomes de todas as seções de um arquivo de configuração específico (.INI), como, por exemplo, TCP, GENERAL e DRIVERS. GetINISessions(<cIni>,[uParam1])"
    },
    "GetProfInt": {
        "prefix": "GetProfInt",
        "body": [
            "GetProfInt(${cSecao},${cChave},${nPadrao})"
        ],
        "description": "GetProfInt-Recupera o conteúdo numérico de uma chave do arquivo win.ini (arquivo utilizado para armazenar configurações básicas de inicialização) do sistema operacional. GetProfInt(<cSecao>,<cChave>,<nPadrao>)"
    },
    "GetProfString": {
        "prefix": "GetProfString",
        "body": [
            "GetProfString(${cSecao},${cChave},${cPadrao})"
        ],
        "description": "GetProfString-Recupera o conteúdo caractere de uma chave do arquivo win.ini (arquivo utilizado para armazenar configurações básicas de inicialização) do sistema operacional. GetProfString(<cSecao>,<cChave>,<cPadrao>)"
    },
    "GetPvProfString": {
        "prefix": "GetPvProfString",
        "body": [
            "GetPvProfString(${cSecao},${cChave},${cPadrao},${cNomeArqCfg},${1:/*uParam5*/},${2:/*uParam6*/})"
        ],
        "description": "GetPvProfString-Recupera o caractere de conteúdo de uma chave de um arquivo de configuração (*.INI) qualquer. GetPvProfString(<cSecao>,<cChave>,<cPadrao>,<cNomeArqCfg>,[uParam5],[uParam6])"
    },
    "GetPvProfileInt": {
        "prefix": "GetPvProfileInt",
        "body": [
            "GetPvProfileInt(${cSecao},${cChave},${nPadrao},${cNomeArqCfg},${1:/*uParam5*/},${2:/*uParam6*/})"
        ],
        "description": "GetPvProfileInt-Recupera o conteúdo numérico de uma chave, o arquivo de configuração (*.INI) qualquer. GetPvProfileInt(<cSecao>,<cChave>,<nPadrao>,<cNomeArqCfg>,[uParam5],[uParam6])"
    },
    "GetSrvProfString": {
        "prefix": "GetSrvProfString",
        "body": [
            "GetSrvProfString(${cChave},${cDefault})"
        ],
        "description": "GetSrvProfString-Recupera o conteúdo de uma chave de configuração, o ambiente em uso, no arquivo de configuração (.INI) do TOTVS Application Server. GetSrvProfString(<cChave>,<cDefault>)"
    },
    "WritePProString": {
        "prefix": "WritePProString",
        "body": [
            "WritePProString(${cSecao},${cChave},${cConteudo},${cArqIni})"
        ],
        "description": "WritePProString-Permite criar e/ou alterar uma configuração de seção/chave no arquivo de configuração (.INI). No entanto, se o arquivo não existir, ele será criado. \n\nOpcionalmente, você pode definir um caminho absoluto, com drive de disco, para que o arquivo de configuração (.INI) seja atualizado na estação onde o TOTVS Smart Client estiver rodando. WritePProString(<cSecao>,<cChave>,<cConteudo>,<cArqIni>)"
    },
    "WriteProfString": {
        "prefix": "WriteProfString",
        "body": [
            "WriteProfString(${cSecao},${cChave},${cValor})"
        ],
        "description": "WriteProfString-Cria ou altera o conteúdo de uma chave no arquivo win.ini (arquivo usado para armazenar as configurações básicas do boot) do sistema operacional. WriteProfString(<cSecao>,<cChave>,<cValor>)"
    },
    "WriteSrvProfString": {
        "prefix": "WriteSrvProfString",
        "body": [
            "WriteSrvProfString(${cChave},${cValor})"
        ],
        "description": "WriteSrvProfString-Cria ou altera uma chave no arquivo de configuração (*.INI), na seção sobre o ambiente em uso. WriteSrvProfString(<cChave>,<cValor>)"
    },
    "ADir": {
        "prefix": "ADir",
        "body": [
            "ADir(${2:/*cEspecArq*/},@${3:/*aNomesArq*/},@${4:/*aTamanhos*/},@${5:/*aDatas*/},@${6:/*aHoras*/},@${7:/*aAtributos*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "ADir-Preenche uma série de arrays com informações de arquivos e diretórios (nomes de arquivos, tamanhos, datas, horas e atributos). ADir([cEspecArq],[@aNomesArq],[@aTamanhos],[@aDatas],[@aHoras],[@aAtributos],[lChangeCase])"
    },
    "CHMOD": {
        "prefix": "CHMOD",
        "body": [
            "CHMOD(${cFileName},${nFileMode},${2:/*uParam3*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "CHMOD-Altera as permissões de um arquivo. CHMOD(<cFileName>,<nFileMode>,[uParam3],[lChangeCase])"
    },
    "CpyS2T": {
        "prefix": "CpyS2T",
        "body": [
            "CpyS2T(${cFile},${cFolder},${1|.T.,.F.,/*lCompress*/|},${2|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "CpyS2T-Copie um arquivo do ambiente do servidor, do caminho raiz para um diretório na máquina onde você está executando o SmartClient. CpyS2T(<cFile>,<cFolder>,[lCompress],[lChangeCase])"
    },
    "CpyS2TW": {
        "prefix": "CpyS2TW",
        "body": [
            "CpyS2TW(${cOrigem},${1|.T.,.F.,/*lSendToBrowser*/|})"
        ],
        "description": "CpyS2TW-Copia um arquivo do servidor para o cliente (HTML SmartClient). CpyS2TW(<cOrigem>,[lSendToBrowser])"
    },
    "CpyT2S": {
        "prefix": "CpyT2S",
        "body": [
            "CpyT2S(${cFile},${cFolder},${1|.T.,.F.,/*lCompress*/|},${2|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "CpyT2S-Copia um arquivo da máquina onde está executando o SmartClient, para um diretório no ambiente do servidor, a partir do rootpath. CpyT2S(<cFile>,<cFolder>,[lCompress],[lChangeCase])"
    },
    "CurDir": {
        "prefix": "CurDir",
        "body": [
            "CurDir(${1:/*cNovoPath*/})"
        ],
        "description": "CurDir-Exibe o servidor de diretório atual. \\neste diretório é relativo ao RootPath, definido no arquivo de configuração (appserver.ini), do Application Server, para identificar o diretório home do sistema em execução. CurDir([cNovoPath])"
    },
    "DirRemove": {
        "prefix": "DirRemove",
        "body": [
            "DirRemove(${cPath},${2:/*uParam2*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "DirRemove-Remove um diretório específico. DirRemove(<cPath>,[uParam2],[lChangeCase])"
    },
    "Directory": {
        "prefix": "Directory",
        "body": [
            "Directory(${cDirEsp},${2:/*cAtributos*/},${3:/*uParam1*/},${1|.T.,.F.,/*lCaseSensitive*/|},${4:/*nTypeOrder*/})"
        ],
        "description": "Directory-Crie um array bidimensional com o conteúdo de um diretório. \\n Para isso, retorna informações sobre os arquivos do diretório atual ou especificado. Esta função é semelhante a ADir(), mas retorna um único array ao invés de adicionar valores a uma série de arrays existentes passados por referência. Directory(<cDirEsp>,[cAtributos],[uParam1],[lCaseSensitive],[nTypeOrder])"
    },
    "ExistDir": {
        "prefix": "ExistDir",
        "body": [
            "ExistDir(${cPath},${2:/*uParam2*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "ExistDir-Determina se um diretório existe e é válido. ExistDir(<cPath>,[uParam2],[lChangeCase])"
    },
    "FClose": {
        "prefix": "FClose",
        "body": [
            "FClose(${1:/*nHandle*/})"
        ],
        "description": "FClose-Fecha um arquivo binário aberto. FClose([nHandle])"
    },
    "FCreate": {
        "prefix": "FCreate",
        "body": [
            "FCreate(${cArquivo},${2:/*nAtributo*/},${3:/*xParam3*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "FCreate-Cria um arquivo vazio no disco para operação de gravação no modo exclusivo, com tamanho de 0 (zero) bytes. Se o arquivo especificado já existir no disco, o arquivo é aberto em modo exclusivo e seu conteúdo é excluído (truncado para 0 bytes). Se a operação não for concluída com sucesso, a função retornará o manipulador -1, caso contrário, será retornado ao manipulador o acesso ao arquivo para operações de gravação. FCreate(<cArquivo>,[nAtributo],[xParam3],[lChangeCase])"
    },
    "FErase": {
        "prefix": "FErase",
        "body": [
            "FErase(${cArquivo},${2:/*xParam*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "FErase-Exclui um arquivo do disco. FErase(<cArquivo>,[xParam],[lChangeCase])"
    },
    "FError": {
        "prefix": "FError",
        "body": [
            "FError()"
        ],
        "description": "FError-TA função FError() é utilizada para recuperar um código de erro após uma falha na operação com arquivos ( File I/O ). Quando utilizadas funções de manipulação de arquivos em baixo nível ( FCreate, FOpen, FSeek ... ), e uma operação desta natureza falhou e/ou não foi realizada com sucesso, utilize a função FError() para recuperar uma instância de código que indique a condição de falha da última operação. FError()"
    },
    "FListzip": {
        "prefix": "FListzip",
        "body": [
            "FListzip(${cArquivoZip},@${1:/*nRet*/},@${2:/*cSenha*/})"
        ],
        "description": "FListzip-Lista os arquivos que estão dentro do arquivo compactado em formato Zip. FListzip(<cArquivoZip>,[@nRet],[cSenha])"
    },
    "FOpen": {
        "prefix": "FOpen",
        "body": [
            "FOpen(${cArq},${2:/*nModo*/},${3:/*xParam3*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "FOpen-Abre um arquivo binário.\\n É uma função de tratamento de arquivo de baixo nível que abre um arquivo binário existente para que possa ser lido e escrito, dependendo do argumento no parâmetro <nModo>. FOpen(<cArq>,[nModo],[xParam3],[lChangeCase])"
    },
    "FRead": {
        "prefix": "FRead",
        "body": [
            "FRead(${nHandle},${cBufferVar},${nQtdBytes})"
        ],
        "description": "FRead-Lê caracteres de um arquivo binário para um buffer variável. FRead(<nHandle>,<cBufferVar>,<nQtdBytes>)"
    },
    "FReadStr": {
        "prefix": "FReadStr",
        "body": [
            "FReadStr(${nHandle},${nQtdBytes})"
        ],
        "description": "FReadStr-Lê caracteres de um arquivo binário. FReadStr(<nHandle>,<nQtdBytes>)"
    },
    "FRename": {
        "prefix": "FRename",
        "body": [
            "FRename(${cArquivo},${cNovoArq},${2:/*nParam3*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "FRename-Renomeia um arquivo. FRename(<cArquivo>,<cNovoArq>,[nParam3],[lChangeCase])"
    },
    "FRenameEx": {
        "prefix": "FRenameEx",
        "body": [
            "FRenameEx(${cArquivo},${cNovoArq},${1:/*nParam3*/})"
        ],
        "description": "FRenameEx-Renomeia um arquivo no Application Server e/ou Smart Client respeitando as maiúsculas e minúsculas do nome do arquivo indicado no segundo parâmetro. (Por padrão, o primeiro parâmetro continua alterando o caso). FRenameEx(<cArquivo>,<cNovoArq>,[nParam3])"
    },
    "FSeek": {
        "prefix": "FSeek",
        "body": [
            "FSeek(${nHandle},${nOffSet},${1:/*nOrigem*/})"
        ],
        "description": "FSeek-Posiciona o ponteiro do arquivo para as próximas operações de leitura ou gravação. FSeek(<nHandle>,<nOffSet>,[nOrigem])"
    },
    "FT_FEOF": {
        "prefix": "FT_FEOF",
        "body": [
            "FT_FEOF()"
        ],
        "description": "FT_FEOF-Indica se o ponteiro está posicionado no final do arquivo de texto. FT_FEOF()"
    },
    "FT_FGoTop": {
        "prefix": "FT_FGoTop",
        "body": [
            "FT_FGoTop()"
        ],
        "description": "FT_FGoTop-Posiciona no início (primeiro caracter da primeira linha) do arquivo texto aberto pela função FT_FUse(). FT_FGoTop()"
    },
    "FT_FGoto": {
        "prefix": "FT_FGoto",
        "body": [
            "FT_FGoto(${nPos})"
        ],
        "description": "FT_FGoto-Move o ponteiro que indica a leitura do arquivo texto, para a posição absoluta especificada no parâmetro <nPos>. FT_FGoto(<nPos>)"
    },
    "FT_FLastRec": {
        "prefix": "FT_FLastRec",
        "body": [
            "FT_FLastRec()"
        ],
        "description": "FT_FLastRec-Lê e retorna o número total de linhas do arquivo de texto aberto pela função FT_FUse(). FT_FLastRec()"
    },
    "FT_FReadLn": {
        "prefix": "FT_FReadLn",
        "body": [
            "FT_FReadLn()"
        ],
        "description": "FT_FReadLn-Lê e retorna uma linha de texto do arquivo aberto pela função FT_FUse(). As linhas de texto são delimitadas pela sequência de caracteres CRLF (chr(13)+chr(10)) ou apenas LF (chr(10)), e o tamanho máximo de cada linha é de 1022 bytes. FT_FReadLn()"
    },
    "FT_FRecno": {
        "prefix": "FT_FRecno",
        "body": [
            "FT_FRecno()"
        ],
        "description": "FT_FRecno-Lê e retorna a posição atual do ponteiro do arquivo de texto aberto pela função FT_FUse(). FT_FRecno()"
    },
    "FT_FSkip": {
        "prefix": "FT_FSkip",
        "body": [
            "FT_FSkip(${1:/*nLinhas*/})"
        ],
        "description": "FT_FSkip-Move o ponteiro, um arquivo de texto aberto pela função FT_FUse(), para uma nova posição. FT_FSkip([nLinhas])"
    },
    "FT_FUse": {
        "prefix": "FT_FUse",
        "body": [
            "FT_FUse(${1:/*cTXTFile*/})"
        ],
        "description": "FT_FUse-Abre e fecha um arquivo de texto para fornecer as funções FT_F*. FT_FUse([cTXTFile])"
    },
    "FUnzip": {
        "prefix": "FUnzip",
        "body": [
            "FUnzip(${cArquivoZip},${cPasta},${1:/*cSenha*/})"
        ],
        "description": "FUnzip-Descompacta um arquivo no formato Zip. FUnzip(<cArquivoZip>,<cPasta>,[cSenha])"
    },
    "FWrite": {
        "prefix": "FWrite",
        "body": [
            "FWrite(${nHandle},${cBuffer},${1:/*nQtdBytes*/})"
        ],
        "description": "FWrite-Grava dados de uma string de buffer em um arquivo binário. Para isso, você pode digitar todo ou parte do conteúdo do buffer, limitando a quantidade de bytes. FWrite(<nHandle>,<cBuffer>,[nQtdBytes])"
    },
    "FZip": {
        "prefix": "FZip",
        "body": [
            "FZip(${cArquivoZip},${aArquivos},${1:/*cBaseDir*/},${2:/*cSenha*/})"
        ],
        "description": "FZip-Compacta uma lista de arquivos no formato Zip. FZip(<cArquivoZip>,<aArquivos>,[cBaseDir],[cSenha])"
    },
    "File": {
        "prefix": "File",
        "body": [
            "File(${cArquivo},${2:/*nWhere*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "File-Determina se o arquivo existe no diretório ou caminho padrão AdvPL. File(<cArquivo>,[nWhere],[lChangeCase])"
    },
    "GzCompress": {
        "prefix": "GzCompress",
        "body": [
            "GzCompress(${cFile},${2:/*cGzip*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "GzCompress-Compacta um arquivo do ambiente do servidor, a partir do rootpath, para um arquivo no formato gzip. GzCompress(<cFile>,[cGzip],[lChangeCase])"
    },
    "GzDecomp": {
        "prefix": "GzDecomp",
        "body": [
            "GzDecomp(${cGzip},${cOutDir},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "GzDecomp-Descompacta o conteúdo de um arquivo no formato gzip (GNU zip) do ambiente do servidor, do rootpath para um diretório no servidor. GzDecomp(<cGzip>,<cOutDir>,[lChangeCase])"
    },
    "ListDrives": {
        "prefix": "ListDrives",
        "body": [
            "ListDrives(@${1:/*aUnits*/},@${2:/*aTypes*/},@${nWhere})"
        ],
        "description": "ListDrives-Retorna as unidades (drives), e/ou seus respectivos tipos, a máquina que está executando o TOTVS | Servidor de Aplicação ou o TOTVS | SmartClient. ListDrives([@aUnits],[@aTypes],<nWhere>)"
    },
    "MakeDir": {
        "prefix": "MakeDir",
        "body": [
            "MakeDir(${cPath},${2:/*uParam2*/},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "MakeDir-Cria um diretório. MakeDir(<cPath>,[uParam2],[lChangeCase])"
    },
    "MemoLine": {
        "prefix": "MemoLine",
        "body": [
            "MemoLine(${cText},${1:/*nLineLength*/},${2:/*nLineNumber*/})"
        ],
        "description": "MemoLine-Retorna o conteúdo de um campo, do tipo memorando ou string com várias linhas. MemoLine(<cText>,[nLineLength],[nLineNumber])"
    },
    "MemoRead": {
        "prefix": "MemoRead",
        "body": [
            "MemoRead(${cFile},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "MemoRead-Retorna o conteúdo de um arquivo do tipo texto. MemoRead(<cFile>,[lChangeCase])"
    },
    "MemoWrite": {
        "prefix": "MemoWrite",
        "body": [
            "MemoWrite(${cFile},${cText})"
        ],
        "description": "MemoWrite-Permite escrever e salvar um arquivo de texto. MemoWrite(<cFile>,<cText>)"
    },
    "MsCRC32": {
        "prefix": "MsCRC32",
        "body": [
            "MsCRC32(${cString})"
        ],
        "description": "MsCRC32-Calcula um CRC - (Cyclic Redundancy Code Cyclic Redundancy check) de uma string e retorna um número/resultado. MsCRC32(<cString>)"
    },
    "MsCRC32Str": {
        "prefix": "MsCRC32Str",
        "body": [
            "MsCRC32Str(${cString})"
        ],
        "description": "MsCRC32Str-Calcula um CRC - (Cyclic Redundancy Code Cyclic Redundancy check) de uma string e retorna uma string com o resultado. MsCRC32Str(<cString>)"
    },
    "MsCompress": {
        "prefix": "MsCompress",
        "body": [
            "MsCompress(${cArquivo|aArquivos},${1:/*cDestino*/},${2:/*cSenha*/})"
        ],
        "description": "MsCompress-Compacta um ou vários arquivos em um único arquivo no formato Microsiga Zip (extensão .mzp). MsCompress(<cArquivo|aArquivos>,[cDestino],[cSenha])"
    },
    "MsDecomp": {
        "prefix": "MsDecomp",
        "body": [
            "MsDecomp(${cArquivo},${1:/*cPathDestino*/},${2:/*cSenha*/})"
        ],
        "description": "MsDecomp-Descompacta um arquivo compactado, no formato Microsiga Zip (extensão .mzp), no diretório informado. MsDecomp(<cArquivo>,[cPathDestino],[cSenha])"
    },
    "SplitPath": {
        "prefix": "SplitPath",
        "body": [
            "SplitPath(${cArquivo},@${1:/*cDrive*/},@${2:/*cDiretorio*/},@${3:/*cNome*/},@${4:/*cExtensao*/})"
        ],
        "description": "SplitPath-Divide um caminho de todo o disco em todas as suas subpartes (unidade, diretório, nome e extensão). SplitPath(<cArquivo>,[@cDrive],[@cDiretorio],[@cNome],[@cExtensao])"
    },
    "TarCompress": {
        "prefix": "TarCompress",
        "body": [
            "TarCompress(${aItens},${cDest},${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "TarCompress-Armazena arquivos e diretórios em um único arquivo no formato TAR (Tape ARchive). TarCompress(<aItens>,<cDest>,[lChangeCase])"
    },
    "TarDecomp": {
        "prefix": "TarDecomp",
        "body": [
            "TarDecomp(${cTarFile},${cOutDir},@${2:/*nFilesOut*/},@${1|.T.,.F.,/*lChangeCase*/|})"
        ],
        "description": "TarDecomp-Restaura os arquivos e diretórios contidos em um arquivo no formato TAR (Tape ARchive). TarDecomp(<cTarFile>,<cOutDir>,[@nFilesOut],[lChangeCase])"
    },
    "cGetFile": {
        "prefix": "cGetFile",
        "body": [
            "cGetFile(${4:/*cMascara*/},${5:/*cTitulo*/},${6:/*nMascpadrao*/},${7:/*cDirinicial*/},${1|.T.,.F.,/*lSalvar*/|},${8:/*nOpcoes*/},${2|.T.,.F.,/*lArvore*/|},${3|.T.,.F.,/*lKeepCase*/|})"
        ],
        "description": "cGetFile-Exibe uma janela com os diretórios disponíveis na estação e no servidor, e retorna o nome do item. cGetFile([cMascara],[cTitulo],[nMascpadrao],[cDirinicial],[lSalvar],[nOpcoes],[lArvore],[lKeepCase])"
    },
    "ClassDataArr": {
        "prefix": "ClassDataArr",
        "body": [
            "ClassDataArr(${oObj},${1|.T.,.F.,/*lParent*/|})"
        ],
        "description": "ClassDataArr-Retorna um array multidimensional com todas as informações das propriedades da instância da classe contida no objeto especificado como parâmetro. ClassDataArr(<oObj>,[lParent])"
    },
    "ClassMethArr": {
        "prefix": "ClassMethArr",
        "body": [
            "ClassMethArr(${oObj},${1|.T.,.F.,/*lParent*/|})"
        ],
        "description": "ClassMethArr-Retorna um array multidimensional com todas as informações dos métodos da instância da classe contidas no objeto especificado como parâmetro. ClassMethArr(<oObj>,[lParent])"
    },
    "DelClassIntf": {
        "prefix": "DelClassIntf",
        "body": [
            "DelClassIntf()"
        ],
        "description": "DelClassIntf-Exclui todas as classes de interface do thread. DelClassIntf()"
    },
    "FindClass": {
        "prefix": "FindClass",
        "body": [
            "FindClass(${cClassName})"
        ],
        "description": "FindClass-Indica se uma classe, informada através de uma string para um parâmetro existe no binário e/ou repositório do ambiente atua. FindClass(<cClassName>)"
    },
    "FreeObj": {
        "prefix": "FreeObj",
        "body": [
            "FreeObj(${1:/*oObj*/})"
        ],
        "description": "FreeObj-Exclui da memória a instância do objeto especificado como parâmetro. FreeObj([oObj])"
    },
    "GetClassName": {
        "prefix": "GetClassName",
        "body": [
            "GetClassName(${oObjeto})"
        ],
        "description": "GetClassName-Retorna o nome da classe. GetClassName(<oObjeto>)"
    },
    "GetParentTree": {
        "prefix": "GetParentTree",
        "body": [
            "GetParentTree(${oObjeto})"
        ],
        "description": "GetParentTree-Retorna um array com o nome da classe e as classes herdadas em ordem de herança. GetParentTree(<oObjeto>)"
    },
    "MethlsMemberOf": {
        "prefix": "MethlsMemberOf",
        "body": [
            "MethlsMemberOf(${oObj},${cMethName},${1|.T.,.F.,/*lRecursive*/|})"
        ],
        "description": "MethlsMemberOf-Indica se o método informado através de uma string para um parâmetro existe na classe. MethlsMemberOf(<oObj>,<cMethName>,[lRecursive])"
    },
    "CDow": {
        "prefix": "CDow",
        "body": [
            "CDow(${dExp})"
        ],
        "description": "CDow-Retorna o dia da semana de uma determinada data. CDow(<dExp>)"
    },
    "CMonth": {
        "prefix": "CMonth",
        "body": [
            "CMonth(${dData})"
        ],
        "description": "CMonth-Retorna o mês como string de uma data passada como parâmetro. CMonth(<dData>)"
    },
    "Month": {
        "prefix": "Month",
        "body": [
            "Month(${dData})"
        ],
        "description": "Month-Retorna o mes de uma data. Month(<dData>)"
    },
    "Date": {
        "prefix": "Date",
        "body": [
            "Date()"
        ],
        "description": "Date-Retorna a data do sistema como um valor do tipo data.\\n Esta função fornece um meio de inicializar variáveis de memória com a data atual, comparar outros valores do tipo data e realizar operações aritméticas na data atual. Date()"
    },
    "Day": {
        "prefix": "Day",
        "body": [
            "Day(${dData})"
        ],
        "description": "Day-Retorna o dia do mês de uma determinada data. Day(<dData>)"
    },
    "Dow": {
        "prefix": "Dow",
        "body": [
            "Dow(${dData})"
        ],
        "description": "Dow-Retorna o dia da semana no formato numérico. Dow(<dData>)"
    },
    "ElapTime": {
        "prefix": "ElapTime",
        "body": [
            "ElapTime(${cHoraInicial},${cHoraFinal})"
        ],
        "description": "ElapTime-Retorna uma string, com o número de segundos decorridos entre duas vezes (horário inicial e final) diferentes, no formato hh:mm:ss. ElapTime(<cHoraInicial>,<cHoraFinal>)"
    },
    "LocalToUTC": {
        "prefix": "LocalToUTC",
        "body": [
            "LocalToUTC(${cDate},${cTime},${1:/*nDST*/})"
        ],
        "description": "LocalToUTC-Converte a data e hora local para UTC - Tempo Universal Coordenado. LocalToUTC(<cDate>,<cTime>,[nDST])"
    },
    "Seconds": {
        "prefix": "Seconds",
        "body": [
            "Seconds()"
        ],
        "description": "Seconds-Retorna a hora do sistema em segundos. Seconds()"
    },
    "Time": {
        "prefix": "Time",
        "body": [
            "Time()"
        ],
        "description": "Time-Retorna a hora do sistema operacional. Esta função é usada para exibir ou imprimir a hora do sistema operacional em um relatório ou tela. Time()"
    },
    "UTCToLocal": {
        "prefix": "UTCToLocal",
        "body": [
            "UTCToLocal(${cDate},${cTime},${1:/*nDST*/})"
        ],
        "description": "UTCToLocal-Converte a data e hora UTC em data e hora locais. UTCToLocal(<cDate>,<cTime>,[nDST])"
    },
    "Array": {
        "prefix": "Array",
        "body": [
            "Array(${nElementos1},${1:/*xElemento*/},${xElemento3...xElemento16]})"
        ],
        "description": "Array-Cria uma matriz não inicializada com a quantidade especificada de elementos. Array(<nElementos1>,[xElemento2,xElemento3...xElemento16])"
    },
    "AAdd": {
        "prefix": "AAdd",
        "body": [
            "AAdd(${aDest},${xExpr})"
        ],
        "description": "AAdd-Inclui um elemento no array e ao elemento do array recém-criado, é atribuído o valor especificado pelo parâmetro. AAdd(<aDest>,<xExpr>)"
    },
    "AClone": {
        "prefix": "AClone",
        "body": [
            "AClone(${aSource})"
        ],
        "description": "AClone-Replica uma matriz (estrutura e elementos). AClone(<aSource>)"
    },
    "ACopy": {
        "prefix": "ACopy",
        "body": [
            "ACopy(${aOrigem},${aDestino},${1:/*nInicio*/},${2:/*nCont*/},${3:/*nPosDestino*/})"
        ],
        "description": "ACopy-Copia elementos de um array para outro. ACopy(<aOrigem>,<aDestino>,[nInicio],[nCont],[nPosDestino])"
    },
    "ADel": {
        "prefix": "ADel",
        "body": [
            "ADel(${aSource},${nPos})"
        ],
        "description": "ADel-Apaga um elemento do array e \"arrasta\" o outro para trás tornando-o nulo no último elemento. ADel(<aSource>,<nPos>)"
    },
    "AFill": {
        "prefix": "AFill",
        "body": [
            "AFill(${aDest},${xValue},${1:/*nStart*/},${2:/*nCount*/})"
        ],
        "description": "AFill-Preenche uma matriz com um único valor de qualquer tipo de dados (incluindo matrizes, blocos de código ou nulo) no intervalo especificado. AFill(<aDest>,<xValue>,[nStart],[nCount])"
    },
    "AIns": {
        "prefix": "AIns",
        "body": [
            "AIns(${aDest},${nPos})"
        ],
        "description": "AIns-Inclui um elemento a zero em uma posição definida e 'empurra' o outro para frente descartando o último elemento. AIns(<aDest>,<nPos>)"
    },
    "AScan": {
        "prefix": "AScan",
        "body": [
            "AScan(${aDest},${xExpr},${1:/*nStart*/},${2:/*nCount*/})"
        ],
        "description": "AScan-Percorre um array procurando por um valor especificado. Pode ser especificado um valor a ser pesquisado, ou pode ser informada uma condição da pesquisa através de um bloco de código. AScan(<aDest>,<xExpr>,[nStart],[nCount])"
    },
    "AScanX": {
        "prefix": "AScanX",
        "body": [
            "AScanX(${aDest},${bSearch},${1:/*nStart*/},${2:/*nCount*/})"
        ],
        "description": "AScanX-Concluída a leitura do array procurando por um valor específico. Funciona da mesma forma que o AScan, porém quando você utiliza um bloco de código para realizar a busca, o mesmo é chamado com um segundo parâmetro, informando qual é o elemento do array em questão que está sendo verificado na cadeia de chamadas do o bloco de código. AScanX(<aDest>,<bSearch>,[nStart],[nCount])"
    },
    "ASize": {
        "prefix": "ASize",
        "body": [
            "ASize(${aDestino},${nTamanho})"
        ],
        "description": "ASize-Aumenta ou diminui uma matriz para um tamanho especificado. ASize(<aDestino>,<nTamanho>)"
    },
    "ASort": {
        "prefix": "ASort",
        "body": [
            "ASort(${aVetor},${1:/*nInicio*/},${2:/*nCont*/},${3:/*bOrdem*/})"
        ],
        "description": "ASort-Coloca em ordem todo ou parte de um array. ASort(<aVetor>,[nInicio],[nCont],[bOrdem])"
    },
    "ATail": {
        "prefix": "ATail",
        "body": [
            "ATail(${aArray})"
        ],
        "description": "ATail-Retorna o último elemento do array. ATail(<aArray>)"
    },
    "AToHM": {
        "prefix": "AToHM",
        "body": [
            "AToHM(${aMatriz},${1:/*nColuna_1*/},${2:/*nTrim_1*/},${3:/*nColuna_N*/},${4:/*nTrim_N*/})"
        ],
        "description": "AToHM-Converte uma matriz de dados (Array) em um tHashMap e pode combinar as colunas para a chave de pesquisa. AToHM(<aMatriz>,[nColuna_1],[nTrim_1],[nColuna_N],[nTrim_N])"
    },
    "HMAdd": {
        "prefix": "HMAdd",
        "body": [
            "HMAdd(${oHash},${aVal},${1:/*nColuna_1*/},${2:/*nTrim_1*/},${3:/*nColuna_N*/},${4:/*nTrim_N*/})"
        ],
        "description": "HMAdd-Adiciona um novo item ao objeto tHashMap, indicando qual campo da chave de busca. HMAdd(<oHash>,<aVal>,[nColuna_1],[nTrim_1],[nColuna_N],[nTrim_N])"
    },
    "HMClean": {
        "prefix": "HMClean",
        "body": [
            "HMClean(${oHash})"
        ],
        "description": "HMClean-Limpe todos os dados alocados em um objeto da classe tHashMap. HMClean(<oHash>)"
    },
    "HMDel": {
        "prefix": "HMDel",
        "body": [
            "HMDel(${oHash},${yKey})"
        ],
        "description": "HMDel-Remove o valor armazenado correspondente à chave em um objeto da classe tHashMap. HMDel(<oHash>,<yKey>)"
    },
    "HMGet": {
        "prefix": "HMGet",
        "body": [
            "HMGet(${oHash},${yKey},@${aVal})"
        ],
        "description": "HMGet-Obtém o valor armazenado correspondente à chave em um objeto da classe tHashMap. HMGet(<oHash>,<yKey>,<@aVal>)"
    },
    "HMGetN": {
        "prefix": "HMGetN",
        "body": [
            "HMGetN(${oHash},${nKey},@${aVal})"
        ],
        "description": "HMGetN-Obtém o valor armazenado correspondente à chave em um objeto da classe tHashMap. HMGetN(<oHash>,<nKey>,<@aVal>)"
    },
    "HMKey": {
        "prefix": "HMKey",
        "body": [
            "HMKey(${aArray},${1:/*nColuna_1*/},${2:/*n_Trim_1*/},${3:/*nColuna_N*/},${4:/*n_Trim_N*/})"
        ],
        "description": "HMKey-Obtenha o valor da chave simples ou composto das colunas selecionadas na matriz. A chave obtida pode ser utilizada nas funções: HMGet, HMSet, HMDel. HMKey(<aArray>,[nColuna_1],[n_Trim_1],[nColuna_N],[n_Trim_N])"
    },
    "HMList": {
        "prefix": "HMList",
        "body": [
            "HMList(${oHash},@${aElem})"
        ],
        "description": "HMList-Liste todos os elementos do objeto HashMap em um array. HMList(<oHash>,<@aElem>)"
    },
    "HMNew": {
        "prefix": "HMNew",
        "body": [
            "HMNew()"
        ],
        "description": "HMNew-Cria um objeto da classe tHashMap. HMNew()"
    },
    "HMSet": {
        "prefix": "HMSet",
        "body": [
            "HMSet(${oHash},${yKey},${xVal})"
        ],
        "description": "HMSet-Atualiza o valor correspondente à chave em um objeto da classe tHashMap. HMSet(<oHash>,<yKey>,<xVal>)"
    },
    "HMSetN": {
        "prefix": "HMSetN",
        "body": [
            "HMSetN(${oHash},${nKey},${nVal})"
        ],
        "description": "HMSetN-Atualiza ou cria o valor correspondente à chave em um objeto da classe tHashMap. HMSetN(<oHash>,<nKey>,<nVal>)"
    },
    "__ClearRmt": {
        "prefix": "__ClearRmt",
        "body": [
            "__ClearRmt()"
        ],
        "description": "__ClearRmt-Apaga todas as listas de conteúdo de variáveis criadas com a função __SaveRmt() e armazenadas no TOTVS Smart Client. __ClearRmt([])"
    },
    "__DeleteRmt": {
        "prefix": "__DeleteRmt",
        "body": [
            "__DeleteRmt(${cIdentificador})"
        ],
        "description": "__DeleteRmt-Apaga a lista com um identificador de conteúdo das variáveis criadas pela função __SaveRmt(). __DeleteRmt(<cIdentificador>)"
    },
    "__ListRmt": {
        "prefix": "__ListRmt",
        "body": [
            "__ListRmt()"
        ],
        "description": "__ListRmt-Retorna um array com os identificadores das listas de conteúdo das variáveis armazenadas no TOTVS Smart Client com a função __SaveRmt(). __ListRmt([])"
    },
    "__LoadRmt": {
        "prefix": "__LoadRmt",
        "body": [
            "__LoadRmt(${cIdentificador},${1:/*Param1*/},${2:/*Param2*/},${3:/*...*/},${4:/*Param10*/})"
        ],
        "description": "__LoadRmt-Recupera o conteúdo das variáveis armazenadas no TOTVS Smart Client com o uso da função __SaveRmt(). Por esta razão, é recomendado que o número de variáveis armazenadas com a função __SaveRmt() seja o mesmo para a função __LoadRmt(). Se o número for diferente, apenas o número de variáveis salvas será recuperado. __LoadRmt(<cIdentificador>,[Param1],[Param2],[...],[Param10])"
    },
    "__SaveRmt": {
        "prefix": "__SaveRmt",
        "body": [
            "__SaveRmt(${cIdentificador},${1:/*Param1*/},${2:/*Param2*/},${3:/*...*/},${4:/*Param3*/})"
        ],
        "description": "__SaveRmt-Salva o conteúdo das variáveis na memória do TOTVS Smart Client. __SaveRmt(<cIdentificador>,[Param1],[Param2],[...],[Param3])"
    },
    "ChkRpoChg": {
        "prefix": "ChkRpoChg",
        "body": [
            "ChkRpoChg()"
        ],
        "description": "ChkRpoChg-Verifica se houve alteração na configuração SourcePath (RPO Ativo) após o início do processo atual. ChkRpoChg()"
    },
    "GetApoInfo": {
        "prefix": "GetApoInfo",
        "body": [
            "GetApoInfo(${cFonte})"
        ],
        "description": "GetApoInfo-Retorna um array com informações (nome, linguagem, modo de compilação, data da última modificação e hora/minuto/segundo) de um determinado arquivo de código-fonte (*.PRW). GetApoInfo(<cFonte>)"
    },
    "GetApoRes": {
        "prefix": "GetApoRes",
        "body": [
            "GetApoRes(${cRes})"
        ],
        "description": "GetApoRes-Retorna o conteúdo de um recurso do repositório. GetApoRes(<cRes>)"
    },
    "GetFuncArray": {
        "prefix": "GetFuncArray",
        "body": [
            "GetFuncArray(${cMascara},@${1:/*aTipo*/},@${2:/*aArquivo*/},@${3:/*aLinha*/},@${4:/*aData*/},@${5:/*aHora*/})"
        ],
        "description": "GetFuncArray-Retorna um ou mais arrays contendo os dados das funções contidas no RPO - Repository Portable Object, a partir de uma máscara. GetFuncArray(<cMascara>,[@aTipo],[@aArquivo],[@aLinha],[@aData],[@aHora])"
    },
    "GetRpoLog": {
        "prefix": "GetRpoLog",
        "body": [
            "GetRpoLog()"
        ],
        "description": "GetRpoLog-Retorna um array com os dados de todos os patches aplicados.  GetRpoLog()"
    },
    "GetSrcArray": {
        "prefix": "GetSrcArray",
        "body": [
            "GetSrcArray(${cNome})"
        ],
        "description": "GetSrcArray-Retorna um array com o nome das fontes compiladas. GetSrcArray(<cNome>)"
    },
    "Resource2File": {
        "prefix": "Resource2File",
        "body": [
            "Resource2File(${cResource},${cFile})"
        ],
        "description": "Resource2File-Salva uma imagem do repositório em um arquivo em disco do caminho raiz do ambiente no servidor. Resource2File(<cResource>,<cFile>)"
    },
    "RetImgType": {
        "prefix": "RetImgType",
        "body": [
            "RetImgType(${cPath})"
        ],
        "description": "RetImgType-Retorna o tipo de imagem ( BMP ou JPG ) de um caminho informado pelo parâmetro. RetImgType(<cPath>)"
    },
    "AnsiToOEM": {
        "prefix": "AnsiToOEM",
        "body": [
            "AnsiToOEM(${cStringAnsi})"
        ],
        "description": "AnsiToOEM-Converte uma string do formato ANSI Text (formato Microsoft Windows) para OEM/MS-DOS. AnsiToOEM(<cStringAnsi>)"
    },
    "AllTrim": {
        "prefix": "AllTrim",
        "body": [
            "AllTrim(${cText})"
        ],
        "description": "AllTrim-Remove espaços em branco à direita e à esquerda de uma string. AllTrim(<cText>)"
    },
    "Asc": {
        "prefix": "Asc",
        "body": [
            "Asc(${cString})"
        ],
        "description": "Asc-Converte um caractere em seu valor ASCII mais à esquerda em uma string. Asc(<cString>)"
    },
    "At": {
        "prefix": "At",
        "body": [
            "At(${cPesquisa},${cDestino},${1:/*nStart*/})"
        ],
        "description": "At-Retorna a posição da primeira ocorrência de uma substring em uma string. Para isso, a função pesquisa o destino da string da direita. At(<cPesquisa>,<cDestino>,[nStart])"
    },
    "BitOn": {
        "prefix": "BitOn",
        "body": [
            "BitOn(${cStr},${nStart},${nTest},${nLength})"
        ],
        "description": "BitOn-Verifica se os primeiros bits de uma string são baseados em 0. BitOn(<cStr>,<nStart>,<nTest>,<nLength>)"
    },
    "Chr": {
        "prefix": "Chr",
        "body": [
            "Chr(${nCodigo})"
        ],
        "description": "Chr-Converte um código ASCII para o caractere. Chr(<nCodigo>)"
    },
    "Compress": {
        "prefix": "Compress",
        "body": [
            "Compress(@${cBufferOut},@${nLenghtOut},@${cBufferIn},@${nLenghtIn})"
        ],
        "description": "Compress-Compacte um buffer recebido por meio de um algoritmo proprietário. Compress(<@cBufferOut>,<@nLenghtOut>,<cBufferIn>,<nLenghtIn>)"
    },
    "DecodeUtf16": {
        "prefix": "DecodeUtf16",
        "body": [
            "DecodeUtf16(${cText},${1:/*nEndian*/})"
        ],
        "description": "DecodeUtf16-Converte uma string de UTF-16 (formato de transformação Unicode de 16 bits) para codificação CP1252. DecodeUtf16(<cText>,[nEndian])"
    },
    "Descend": {
        "prefix": "Descend",
        "body": [
            "Descend(${cString})"
        ],
        "description": "Descend-Converte e retorna o formulário complementado pela cadeia de expressão especificada. Descend(<cString>)"
    },
    "EncodeUtf8": {
        "prefix": "EncodeUtf8",
        "body": [
            "EncodeUtf8(${cText})"
        ],
        "description": "EncodeUtf8-Converte uma string de origem de um encoding (code-page) conhecido para a codificação UTF-8 ( 8-bit Unicode Transformation Format ). EncodeUtf8(<cText>)"
    },
    "EncodeUtf16": {
        "prefix": "EncodeUtf16",
        "body": [
            "EncodeUtf16(${cText},${1:/*nEndian*/})"
        ],
        "description": "EncodeUtf16-Converte uma string de origem em CP1252 (página de código do Windows 1252) em UTF-16 (formato de transformação Unicode de 16 bits). EncodeUtf16(<cText>,[nEndian])"
    },
    "GetDtoVal": {
        "prefix": "GetDtoVal",
        "body": [
            "GetDtoVal(${cDtoVal})"
        ],
        "description": "GetDtoVal-Converte uma string que contém um valor numérico para um número formatado. GetDtoVal(<cDtoVal>)"
    },
    "GzStrComp": {
        "prefix": "GzStrComp",
        "body": [
            "GzStrComp(${cSource},@${cTarget},@${nTargetLen})"
        ],
        "description": "GzStrComp-Compacte uma string no formato gzip. GzStrComp(<cSource>,<@cTarget>,<@nTargetLen>)"
    },
    "GzStrDecomp": {
        "prefix": "GzStrDecomp",
        "body": [
            "GzStrDecomp(${cSource},${nSourceLen},@${cTarget})"
        ],
        "description": "GzStrDecomp-Descompacta uma string no formato gzip. GzStrDecomp(<cSource>,<nSourceLen>,<@cTarget>)"
    },
    "IsAlpha": {
        "prefix": "IsAlpha",
        "body": [
            "IsAlpha(${cString})"
        ],
        "description": "IsAlpha-Determina se o caractere à esquerda de uma string é alfabético. IsAlpha(<cString>)"
    },
    "IsDigit": {
        "prefix": "IsDigit",
        "body": [
            "IsDigit(${cString})"
        ],
        "description": "IsDigit-Determina se o caractere mais à esquerda de uma string é um dígito. IsDigit(<cString>)"
    },
    "IsLower": {
        "prefix": "IsLower",
        "body": [
            "IsLower(${cString})"
        ],
        "description": "IsLower-Determina se o caractere mais à esquerda de uma string é uma letra minúscula. IsLower(<cString>)"
    },
    "IsUpper": {
        "prefix": "IsUpper",
        "body": [
            "IsUpper(${cString})"
        ],
        "description": "IsUpper-Determina se o caractere mais à esquerda de uma string é uma letra maiúscula. IsUpper(<cString>)"
    },
    "LTrim": {
        "prefix": "LTrim",
        "body": [
            "LTrim(${cText})"
        ],
        "description": "LTrim-Remove os espaços em branco iniciais de uma string. LTrim(<cText>)"
    },
    "Left": {
        "prefix": "Left",
        "body": [
            "Left(${cText},${nCount})"
        ],
        "description": "Left-Retorna um determinado número de caracteres à esquerda de uma string. Left(<cText>,<nCount>)"
    },
    "Len": {
        "prefix": "Len",
        "body": [
            "Len(${xParam})"
        ],
        "description": "Len-Retorna o tamanho de uma variável. Len(<xParam>)"
    },
    "Look4Bit": {
        "prefix": "Look4Bit",
        "body": [
            "Look4Bit(${cStr},${nStart},${nTest},${nLength})"
        ],
        "description": "Look4Bit-Retorna a quantidade de bits que são 1 em uma string. Look4Bit(<cStr>,<nStart>,<nTest>,<nLength>)"
    },
    "Lower": {
        "prefix": "Lower",
        "body": [
            "Lower(${cText})"
        ],
        "description": "Lower-Converte o texto em letras minúsculas. Lower(<cText>)"
    },
    "MLCount": {
        "prefix": "MLCount",
        "body": [
            "MLCount(${cText},${2:/*nLinLen*/},${3:/*nTabSize*/},${1|.T.,.F.,/*lQuebra*/|})"
        ],
        "description": "MLCount-Conta a quantidade de linhas de um campo memo ou string com múltiplas linhas, considerando um numero máximo de letras por linha, tamanho estimado para caracteres de tabulação, e quebras de linhas CRLF (pulo de linha) dentro do texto. MLCount(<cText>,[nLinLen],[nTabSize],[lQuebra])"
    },
    "Match": {
        "prefix": "Match",
        "body": [
            "Match(${cValue},${cMask})"
        ],
        "description": "Match-Valida se uma string é formatada de acordo com um padrão específico. Match(<cValue>,<cMask>)"
    },
    "MathC": {
        "prefix": "MathC",
        "body": [
            "MathC(${cNum1},${cOperacao},${cNum2})"
        ],
        "description": "MathC-Executa operações matemáticas (soma, subtração, divisão, multiplicação e exponenciação) com strings que contêm um valor numérico. MathC(<cNum1>,<cOperacao>,<cNum2>)"
    },
    "NotBit": {
        "prefix": "NotBit",
        "body": [
            "NotBit(@${cStr},@${nLength})"
        ],
        "description": "NotBit-Inverte os bits dos caracteres de uma string. NotBit(<@cStr>,<nLength>)"
    },
    "OEMToAnsi": {
        "prefix": "OEMToAnsi",
        "body": [
            "OEMToAnsi(${cStringOEM})"
        ],
        "description": "OEMToAnsi-Transforma uma cadeia de caracteres no formato OEM / MS-DOS Text para uma cadeia de caracteres no formato ANSI Texto (formato do Windows). OEMToAnsi(<cStringOEM>)"
    },
    "Pad": {
        "prefix": "Pad",
        "body": [
            "Pad(${xExp},${nLen},${1:/*cFill*/})"
        ],
        "description": "Pad-Adiciona caracteres de preenchimento à direita do conteúdo de uma variável. Pad(<xExp>,<nLen>,[cFill])"
    },
    "PadC": {
        "prefix": "PadC",
        "body": [
            "PadC(${xExp},${nLen},${1:/*cFill*/})"
        ],
        "description": "PadC-Centraliza o conteúdo de uma variável adicionando caracteres de preenchimento à direita e à esquerda. PadC(<xExp>,<nLen>,[cFill])"
    },
    "PadL": {
        "prefix": "PadL",
        "body": [
            "PadL(${xExp},${nLen},${1:/*cFill*/})"
        ],
        "description": "PadL-Adiciona caracteres de preenchimento à esquerda do conteúdo de uma variável. PadL(<xExp>,<nLen>,[cFill])"
    },
    "PadR": {
        "prefix": "PadR",
        "body": [
            "PadR(${xExp},${nLen},${1:/*cFill*/})"
        ],
        "description": "PadR-Adiciona caracteres de preenchimento à direita do conteúdo de uma variável. PadR(<xExp>,<nLen>,[cFill])"
    },
    "RAt": {
        "prefix": "RAt",
        "body": [
            "RAt(${cSearch},${cSource})"
        ],
        "description": "RAt-Retorna a posição da última ocorrência de uma substring em uma string. Para isso, a função pesquisa o destino da string à direita. RAt(<cSearch>,<cSource>)"
    },
    "RTrim": {
        "prefix": "RTrim",
        "body": [
            "RTrim(${cText})"
        ],
        "description": "RTrim-Remove os espaços em branco à direita de uma string. RTrim(<cText>)"
    },
    "Replicate": {
        "prefix": "Replicate",
        "body": [
            "Replicate(${cString},${nCount})"
        ],
        "description": "Replicate-Gera uma string repetida da outra. Replicate(<cString>,<nCount>)"
    },
    "Right": {
        "prefix": "Right",
        "body": [
            "Right(${cText},${nCount})"
        ],
        "description": "Right-Retorna um determinado número de caracteres à direita de uma string. Right(<cText>,<nCount>)"
    },
    "StrIConv": {
        "prefix": "StrIConv",
        "body": [
            "StrIConv(${cText},${fromCodePage},${toCodePage})"
        ],
        "description": "StrIConv-Converte uma string de uma página de código para outra. StrIConv(<cText>,<fromCodePage>,<toCodePage>)"
    },
    "Space": {
        "prefix": "Space",
        "body": [
            "Space(${nCount})"
        ],
        "description": "Space-Retorna uma string com uma quantidade especificada de espaços. Space(<nCount>)"
    },
    "StrTokArr": {
        "prefix": "StrTokArr",
        "body": [
            "StrTokArr(${cValue},${cToken})"
        ],
        "description": "StrTokArr-Retorna um array, de acordo com os dados passados como parâmetro para a função. Desta forma, a função receberá uma string e uma sequência de um ou mais caracteres, que representa uma aba, onde cada porção da string entre as abas será um elemento do array retornado. StrTokArr(<cValue>,<cToken>)"
    },
    "StrTokArr2": {
        "prefix": "StrTokArr2",
        "body": [
            "StrTokArr2(${cValue},${cToken},${1|.T.,.F.,/*lEmptyStr*/|})"
        ],
        "description": "StrTokArr2-Retorna um array, de acordo com os dados passados como parâmetro para a função. Desta forma, a função receberá uma string e uma sequência de um ou mais caracteres, que representa uma aba, onde cada porção da string entre as abas será um elemento do array retornado. StrTokArr2(<cValue>,<cToken>,[lEmptyStr])"
    },
    "StrTran": {
        "prefix": "StrTran",
        "body": [
            "StrTran(${cString},${cSearch},${1:/*cReplace*/},${2:/*nStart*/},${3:/*nCount*/})"
        ],
        "description": "StrTran-Pesquise e substitua um conjunto de caracteres de uma string. StrTran(<cString>,<cSearch>,[cReplace],[nStart],[nCount])"
    },
    "Stuff": {
        "prefix": "Stuff",
        "body": [
            "Stuff(${cString},${nInicio},${nElimina},${cInsere})"
        ],
        "description": "Stuff-Exclui e insere caracteres em uma string. Para isso, a função exclui os caracteres <nElimina> a partir da posição inicial <nInicio>. Após, insira <cInsere> na string resultante a partir do início <nInicio>, para formar a string que será retornada. Stuff(<cString>,<nInicio>,<nElimina>,<cInsere>)"
    },
    "StuffBit": {
        "prefix": "StuffBit",
        "body": [
            "StuffBit(@${cStr},@${nStart},@${nTest},@${nLength})"
        ],
        "description": "StuffBit-Altera uma sequência de bits de uma string para 1. StuffBit(<@cStr>,<nStart>,<nTest>,<nLength>)"
    },
    "SubStr": {
        "prefix": "SubStr",
        "body": [
            "SubStr(${cText},${nIndex},${1:/*nLen*/})"
        ],
        "description": "SubStr-Retorna uma parte específica da string. SubStr(<cText>,<nIndex>,[nLen])"
    },
    "Transform": {
        "prefix": "Transform",
        "body": [
            "Transform(${xExp},${1:/*cSayPicture*/})"
        ],
        "description": "Transform-Converte qualquer valor em uma string formatada. Para isso, formate os valores, do tipo caractere, data, lógico e numérico, como uma string da máscara especificada que inclui uma combinação de strings de template e funções picture. Transform(<xExp>,[cSayPicture])"
    },
    "UnCompress": {
        "prefix": "UnCompress",
        "body": [
            "UnCompress(@${cBufferOut},@${nLenghtOut},@${cBufferIn},@${nLenghtIn})"
        ],
        "description": "UnCompress-Descompacte um buffer (gerado pela função Compress) recebido através do algoritmo proprietário. UnCompress(<@cBufferOut>,<@nLenghtOut>,<cBufferIn>,<nLenghtIn>)"
    },
    "UnStuff": {
        "prefix": "UnStuff",
        "body": [
            "UnStuff(@${cStr},@${nStart},@${nTest},@${nLength})"
        ],
        "description": "UnStuff-Altera uma sequência de bits de uma string para 0. UnStuff(<@cStr>,<nStart>,<nTest>,<nLength>)"
    },
    "Upper": {
        "prefix": "Upper",
        "body": [
            "Upper(${cText})"
        ],
        "description": "Upper-Converte o texto em letras maiúsculas. Upper(<cText>)"
    },
    "ClearGlbValue": {
        "prefix": "ClearGlbValue",
        "body": [
            "ClearGlbValue(${cGlbName},${1:/*nTimeOut*/})"
        ],
        "description": "ClearGlbValue-Limpa um conteúdo armazenado em uma variável global. ClearGlbValue(<cGlbName>,[nTimeOut])"
    },
    "GetGlbValue": {
        "prefix": "GetGlbValue",
        "body": [
            "GetGlbValue(${cGlbName})"
        ],
        "description": "GetGlbValue-Retorna o valor de uma variável global. GetGlbValue(<cGlbName>)"
    },
    "GetGlbVars": {
        "prefix": "GetGlbVars",
        "body": [
            "GetGlbVars(${cGlbName},${1:/*xValue*/},${...xValueN]})"
        ],
        "description": "GetGlbVars-Recupera o conteúdo de uma ou mais variáveis, que são armazenadas em uma variável global através da função PutGlbVars(). GetGlbVars(<cGlbName>,[xValue1,...xValueN])"
    },
    "MemGlbSize": {
        "prefix": "MemGlbSize",
        "body": [
            "MemGlbSize()"
        ],
        "description": "MemGlbSize-Retorna a quantidade de memória, em bytes, sendo consumida pela lista de variáveis globais na memória. MemGlbSize()"
    },
    "PutGlbValue": {
        "prefix": "PutGlbValue",
        "body": [
            "PutGlbValue(${cGlbName},${cValue})"
        ],
        "description": "PutGlbValue-Cria e define um valor ( string ) para uma variável global. PutGlbValue(<cGlbName>,<cValue>)"
    },
    "PutGlbVars": {
        "prefix": "PutGlbVars",
        "body": [
            "PutGlbVars(${cGlbName},${1:/*xValue*/},${...xValueN]})"
        ],
        "description": "PutGlbVars-Armazena sob o nome de um identificador global, o conteúdo de uma ou mais variáveis informadas como parâmetro. PutGlbVars(<cGlbName>,[xValue1,...xValueN])"
    },
    "SetVarNameLen-INTERNA": {
        "prefix": "SetVarNameLen",
        "body": [
            "SetVarNameLen(${1:/*nValue*/})"
        ],
        "description": "SetVarNameLen-Define o tamanho de uma variável AdvPL. SetVarNameLen([nValue])"
    },
    "TimeGlbValue": {
        "prefix": "TimeGlbValue",
        "body": [
            "TimeGlbValue(${cGlbName})"
        ],
        "description": "TimeGlbValue-Retorna a quantidade de segundos decorridos desde o último acesso ( criar, atualizar ou ler ) uma variável global. TimeGlbValue(<cGlbName>)"
    },
    "Abs": {
        "prefix": "Abs",
        "body": [
            "Abs(${nExp})"
        ],
        "description": "Abs-Retorna o valor absoluto (independente do sinal) de uma expressão numérica. Abs(<nExp>)"
    },
    "Int": {
        "prefix": "Int",
        "body": [
            "Int(${nValue})"
        ],
        "description": "Int-Retorna um valor numérico para full de um valor numérico com a parte inteira e o decimal que você inseriu como parâmetro, desconsiderando todos os dígitos à direita do ponto decimal. Int(<nValue>)"
    },
    "Max": {
        "prefix": "Max",
        "body": [
            "Max(${xExp1},${xExp2})"
        ],
        "description": "Max-Retorna o maior de dois valores numéricos, ou data. Max(<xExp1>,<xExp2>)"
    },
    "Min": {
        "prefix": "Min",
        "body": [
            "Min(${xExp1},${xExp2})"
        ],
        "description": "Min-Retorna o menor de dois valores numéricos, ou data. Min(<xExp1>,<xExp2>)"
    },
    "NAnd": {
        "prefix": "NAnd",
        "body": [
            "NAnd(${nNum1},${nNum2},${1:/*nNumN*/},${...})"
        ],
        "description": "NAnd-Executa a operação binária AND entre 2 ou mais números. NAnd(<nNum1>,<nNum2>,[nNumN],...)"
    },
    "NOr": {
        "prefix": "NOr",
        "body": [
            "NOr(${nNum1},${nNum2},${1:/*nNumN*/},${...})"
        ],
        "description": "NOr-Executa a operação binária OR entre 2 ou mais números. NOr(<nNum1>,<nNum2>,[nNumN],...)"
    },
    "NXor": {
        "prefix": "NXor",
        "body": [
            "NXor(${nNum1},${nNum2},${1:/*nNumN*/},${...})"
        ],
        "description": "NXor-Executa a operação binária XOR entre 2 ou mais números. NXor(<nNum1>,<nNum2>,[nNumN],...)"
    },
    "NoRound": {
        "prefix": "NoRound",
        "body": [
            "NoRound(${1:/*nValor*/},${2:/*nCasas*/})"
        ],
        "description": "NoRound-Retorna um valor numérico com uma precisão específica do ponto decimal (truncado ou arredondado).NoRound([nValor],[nCasas])"
    },
    "Randomize": {
        "prefix": "Randomize",
        "body": [
            "Randomize(${nMinimo},${nMaximo})"
        ],
        "description": "Randomize-Gera um inteiro aleatório entre o intervalo, inferior e superior recebido através dos parâmetros (nMinimo e nMaximo). Randomize(<nMinimo>,<nMaximo>)"
    },
    "Round": {
        "prefix": "Round",
        "body": [
            "Round(${nValue},${nPoint})"
        ],
        "description": "Round-Arredonda um valor decimal para a quantidade especificada de dígitos. Round(<nValue>,<nPoint>)"
    },
    "AEval": {
        "prefix": "AEval",
        "body": [
            "AEval(${aArray},${bBlock},${1:/*nStart*/},${2:/*nCount*/})"
        ],
        "description": "AEval-Executa um bloco de código para cada elemento de um array. AEval(<aArray>,<bBlock>,[nStart],[nCount])"
    },
    "DBEval": {
        "prefix": "DBEval",
        "body": [
            "DBEval(${bBlock},${2:/*bFirstCondition*/},${3:/*bSecondCondition*/},${4:/*nCount*/},${5:/*nRecno*/},${1|.T.,.F.,/*lRest*/|})"
        ],
        "description": "DBEval-Avalia um bloco de código para cada registro que atende a um escopo definido, através dos blocos da primeira e segunda condição. DBEval(<bBlock>,[bFirstCondition],[bSecondCondition],[nCount],[nRecno],[lRest])"
    },
    "Eval": {
        "prefix": "Eval",
        "body": [
            "Eval(${bBloco},${1:/*xVariavel*/})"
        ],
        "description": "Eval-Executa um bloco de código. Eval(<bBloco>,[xVariavel])"
    },
    "GetCBSource": {
        "prefix": "GetCBSource",
        "body": [
            "GetCBSource(${bBlocoDeCodigo})"
        ],
        "description": "GetCBSource-Recupera o código-fonte de um bloco de código. GetCBSource(<bBlocoDeCodigo>)"
    },
    "Ceiling": {
        "prefix": "Ceiling",
        "body": [
            "Ceiling(${nValor})"
        ],
        "description": "Ceiling-Calcula o arrendodamento (para cima) do valor do ponto flutuante. Ceiling(<nValor>)"
    },
    "Exp": {
        "prefix": "Exp",
        "body": [
            "Exp(${nExpoente})"
        ],
        "description": "Exp-Calcula o valor da base antilogaritmo 'e' (a base do logaritmo natural) de um valor numérico. Exp(<nExpoente>)"
    },
    "Log": {
        "prefix": "Log",
        "body": [
            "Log(${nValue})"
        ],
        "description": "Log-Calcula o logaritmo natural de um valor numérico. Log(<nValue>)"
    },
    "Log10": {
        "prefix": "Log10",
        "body": [
            "Log10(${nValue})"
        ],
        "description": "Log10-Calcula o logaritmo de um valor numérico. Log10(<nValue>)"
    },
    "Mod": {
        "prefix": "Mod",
        "body": [
            "Mod(${nDividend},${nDivisor})"
        ],
        "description": "Mod-Retorna um número que representa o restante da divisão do primeiro parâmetro (nDividend) pelo segundo (nDivisor). O operador módulo (%) AdvPL tem a mesma funcionalidade que a função Mod. Mod(<nDividend>,<nDivisor>)"
    },
    "Sqrt": {
        "prefix": "Sqrt",
        "body": [
            "Sqrt(${nRadicand})"
        ],
        "description": "Sqrt-Calcula o valor da raiz quadrada de um número positivo. Sqrt(<nRadicand>)"
    },
    "FWBuildFeature": {
        "prefix": "FWBuildFeature",
        "body": [
            "FWBuildFeature(${1:/*nTipo*/},${2:/*cExprAdvPL*/})"
        ],
        "description": "FWBuildFeature-Construa um bloco de código relacionado a alguns atributos das estruturas do Model e da View. Deve ser utilizado quando a estrutura de dados for proveniente do dicionário, pois esta função realiza os tratamentos ao Microsiga Protheus. FWBuildFeature([nTipo],[cExprAdvPL])"
    },
    "FWCalcStruct": {
        "prefix": "FWCalcStruct",
        "body": [
            "FWCalcStruct(${oModelCalc})"
        ],
        "description": "FWCalcStruct-Esta função fornece a estrutura de dados do objeto do tipo de cálculo a ser usado na visualização. As estruturas são fornecidasdas com base nos cálculos do Modelo, adicionados através do método AddCalc. FWCalcStruct(<oModelCalc>)"
    },
    "FWExecModalView": {
        "prefix": "FWExecModalView",
        "body": [
            "FWExecModalView(${1:/*cTitulo*/},${cPrograma},${2:/*nOperation*/},${3:/*bOk*/},${4:/*bCancel*/},${5:/*nWidth*/},${nHeigth})"
        ],
        "description": "FWExecModalView-Função que exibe uma janela exibindo a View(FWFormView) de um determinado programa fonte, na forma do modal. O formato do modal não mostra todos os campos da View, ele restringe a exibição apenas para campos que podem ser exibidos nesse tipo de formulário. Este tipo de formulário deve ser utilizado quando se deseja exibir um resumo de cadastro ao usuário. FWExecModalView([cTitulo],<cPrograma>,[nOperation],[bOk],[bCancel],[nWidth],<nHeigth>)"
    },
    "FWExecView": {
        "prefix": "FWExecView",
        "body": [
            "FWExecView(${1:/*cTitulo*/},${cPrograma},${2:/*nOperation*/},${3:/*oDlg*/},${4:/*bCloseOnOK*/},${5:/*bOk*/},${6:/*nPercReducao*/},${7:/*aEnableButtons*/},${8:/*bCancel*/},${9:/*cOperatId*/},${*:/*cToolBar*/},${*:/*oModelAct*/})"
        ],
        "description": "FWExecView-Função que exibe uma janela exibindo a View(FWFormView) de um determinado programa fonte. FWExecView([cTitulo],<cPrograma>,[nOperation],[oDlg],[bCloseOnOK],[bOk],[nPercReducao],[aEnableButtons],[bCancel],[cOperatId],[cToolBar],[oModelAct])"
    },
    "FWFldGet": {
        "prefix": "FWFldGet",
        "body": [
            "FWFldGet(${cCampo},${2:/*nLinha*/},${3:/*oModel*/},${1|.T.,.F.,/*lShowMsg*/|})"
        ],
        "description": "FWFldGet-Esta função tem como objetivo retorna o valor de um campo do Modelo.Como esta função depende do contexto do modelo ativo, ela só é indicada para uso em atributos de dicionário de dados. FWFldGet(<cCampo>,[nLinha],[oModel],[lShowMsg])"
    },
    "FWFldPut": {
        "prefix": "FWFldPut",
        "body": [
            "FWFldPut(${cCampo},${xConteudo},${3:/*nLinha*/},${4:/*oModel*/},${1|.T.,.F.,/*lShowMsg*/|},${2|.T.,.F.,/*lLoad*/|})"
        ],
        "description": "FWFldPut-Atribua um conteúdo de um campo do Modelo. FWFldPut(<cCampo>,<xConteudo>,[nLinha],[oModel],[lShowMsg],[lLoad])"
    },
    "FWFormCancel": {
        "prefix": "FWFormCancel",
        "body": [
            "FWFormCancel(${oModel})"
        ],
        "description": "FWFormCancel-Esta função realiza os tratamentos necessários ao cancelamento dos formulários de edição do Microsiga Protheus. FWFormCancel(<oModel>)"
    },
    "FWFormCommit": {
        "prefix": "FWFormCommit",
        "body": [
            "FWFormCommit(${oModel},${1:/*bBefore*/},${2:/*bAfter*/},${3:/*bAfterSTTS*/},${bInTTS},${4:/*bABeforeTTS*/},${bIntegEAI})"
        ],
        "description": "FWFormCommit-Esta função realiza os tratamentos necessários ao registro dos submodelos de edição do Microsiga Protheus. A gravação é realizada em níveis onde são registrados o primeiro elemento do modelo e, posteriormente, seus filhos. O controle de transações é aberto por esta função e existe um controle de RollBack para retornar o problema à interface. FWFormCommit(<oModel>,[bBefore],[bAfter],[bAfterSTTS],<bInTTS>,[bABeforeTTS],<bIntegEAI>)"
    },
    "FWFormEAI": {
        "prefix": "FWFormEAI",
        "body": [
            "FWFormEAI(${cXML},${1:/*cError*/},${2:/*cWarning*/},${cProgram})"
        ],
        "description": "FWFormEAI-Esta função realiza os tratamentos necessários para a gravação dos submodelos editando o Microsiga Protheus quando você utiliza a integração com o EAI. FWFormEAI(<cXML>,[cError],[cWarning],<cProgram>)"
    },
    "FWFormStruct": {
        "prefix": "FWFormStruct",
        "body": [
            "FWFormStruct(${nType},${cAliasSX2},${1:/*bSX3*/})"
        ],
        "description": "FWFormStruct-Esta função fornece ao objeto as estruturas de metadados do dicionário de dados, usadas pelas classes no Modelo e na View. FWFormStruct(<nType>,<cAliasSX2>,[bSX3])"
    },
    "FWHASMVC": {
        "prefix": "FWHASMVC",
        "body": [
            "FWHASMVC()"
        ],
        "description": "FWHASMVC-Verifica se o binário suporta o MVC. A compilação deve ser maior ou igual a 7.00.081215 P-20081216. FWHASMVC()"
    },
    "FwLoadBrw": {
        "prefix": "FwLoadBrw",
        "body": [
            "FwLoadBrw(${cProgram})"
        ],
        "description": "FwLoadBrw-Função que retorna um objeto Browse de uma rotina. FwLoadBrw(<cProgram>)"
    },
    "FWLoadByAlias": {
        "prefix": "FWLoadByAlias",
        "body": [
            "FWLoadByAlias(${oObj},${cAlias},${3:/*cAliasReal*/},${4:/*cFieldRecno*/},${1|.T.,.F.,/*lCopy*/|},${2|.T.,.F.,/*lQuery*/|})"
        ],
        "description": "FWLoadByAlias-Função que executa o carregamento de um submodelo com base em um alias existente. FWLoadByAlias(<oObj>,<cAlias>,[cAliasReal],[cFieldRecno],[lCopy],[lQuery])"
    },
    "FWLoadMenuDef": {
        "prefix": "FWLoadMenuDef",
        "body": [
            "FWLoadMenuDef(${cProgram})"
        ],
        "description": "FWLoadMenuDef-Função que retorna o array com os dados da rotina de menu. FWLoadMenuDef(<cProgram>)"
    },
    "FWLoadModel": {
        "prefix": "FWLoadModel",
        "body": [
            "FWLoadModel(${cProgram})"
        ],
        "description": "FWLoadModel-Function que retorna um modelo de objeto de uma determinada fonte. FWLoadModel(<cProgram>)"
    },
    "FWLoadView": {
        "prefix": "FWLoadView",
        "body": [
            "FWLoadView(${cProgram})"
        ],
        "description": "FWLoadView-Function que retorna uma visão de objeto da fonte fornecida. FWLoadView(<cProgram>)"
    },
    "FWMVCMenu": {
        "prefix": "FWMVCMenu",
        "body": [
            "FWMVCMenu(${cRotina})"
        ],
        "description": "FWMVCMenu-Retorna as opções padrão para o MeuDef uma rotina no MVC. Opções padrão: Exibir Incluir Alterar Excluir Imprimir Cópia. FWMVCMenu(<cRotina>)"
    },
    "FWMemoVirtual": {
        "prefix": "FWMemoVirtual",
        "body": [
            "FWMemoVirtual(${oStruct},${aMemoVirtual})"
        ],
        "description": "FWMemoVirtual-Alguns campos do tipo MEMO, uso de tabelas para registro de seus valores (SYP3), esses campos devem ser informados na estrutura para que o MVC possa tomar seu tratamento corretamente. Para esses campos MEMO sempre deve haver outro campo que conterá o código que o campo MEMO foi armazenado na tabela auxiliar. FWMemoVirtual(<oStruct>,<aMemoVirtual>)"
    },
    "FWModelActive": {
        "prefix": "FWModelActive",
        "body": [
            "FWModelActive()"
        ],
        "description": "FWModelActive-Esta função disponibiliza o último objeto da classe FWFormModel ativo, para ser utilizado nas regras de validação do sistema Microsiga Protheus. FWModelActive()"
    },
    "FWRestRows": {
        "prefix": "FWRestRows",
        "body": [
            "FWRestRows(${1:/*aIDs*/},${2:/*oModel*/})"
        ],
        "description": "FWRestRows-Restaura as posições dos FWFormGrids do Modelo. FWRestRows([aIDs],[oModel])"
    },
    "FWSaveRows": {
        "prefix": "FWSaveRows",
        "body": [
            "FWSaveRows(${1:/*oModel*/})"
        ],
        "description": "FWSaveRows-Salva as posições dos FWFormGrids do Modelo. FWSaveRows([oModel])"
    },
    "FWUMessage": {
        "prefix": "FWUMessage",
        "body": [
            "FWUMessage(${cXML},${1:/*cError*/},${2:/*cWarning*/},${cTypeMessage})"
        ],
        "description": "FWUMessage-Esta função realiza o processamento de Mensagens Somente utiliza a integração com o EAI. FWUMessage(<cXML>,[cError],[cWarning],<cTypeMessage>)"
    },
    "FWmBrwActive": {
        "prefix": "FWmBrwActive",
        "body": [
            "FWmBrwActive()"
        ],
        "description": "FWmBrwActive-Fornece o objeto da classe FWMBROWSE ativo. FWmBrwActive()"
    },
    "FormLoadField": {
        "prefix": "FormLoadField",
        "body": [
            "FormLoadField(${oField},${1|.T.,.F.,/*lCopy*/|})"
        ],
        "description": "FormLoadField-Esta função realiza o carregamento dos dados da edição do submodelo do tipo Form Field. FormLoadField(<oField>,<lCopy>)"
    },
    "FormLoadGrid": {
        "prefix": "FormLoadGrid",
        "body": [
            "FormLoadGrid(${oGrid},${1|.T.,.F.,/*lCopy*/|})"
        ],
        "description": "FormLoadGrid-Esta função realiza o carregamento dos dados da edição do submodelo do tipo FormGrid. FormLoadGrid(<oGrid>,[lCopy])"
    },
    "FwStruTrigger": {
        "prefix": "FwStruTrigger",
        "body": [
            "FwStruTrigger(${cDom},${cCDom},${cRegra},${1|.T.,.F.,/*lSeek*/|},${cAlias},${2:/*nOrdem*/},${3:/*cChave*/},${4:/*cCondic*/},${5:/*cSequen*/})"
        ],
        "description": "FwStruTrigger-A função fornece um array com a estrutura para criar um gatilho na estrutura de dados de um submodelo (FWFormModelStruct). Deve ser utilizado quando se deseja criar um trigger na estrutura de dados, com base nos parâmetros informados a função retorna as informações necessárias para criar um trigger utilizando o método AddTrigger. FwStruTrigger(<cDom>,<cCDom>,<cRegra>,[lSeek],<cAlias>,[nOrdem],[cChave],[cCondic],[cSequen])"
    },
    "AddCSSRule": {
        "prefix": "AddCSSRule",
        "body": [
            "AddCSSRule(${cObjeto},${cRegraCSS})"
        ],
        "description": "AddCSSRule-Cria uma lista de regras, CSS - Cascading Style Sheets a serem aplicadas aos objetos no momento de sua criação. AddCSSRule(<cObjeto>,<cRegraCSS>)"
    },
    "AddFontAlias": {
        "prefix": "AddFontAlias",
        "body": [
            "AddFontAlias(${cOrigem},${cDestino})"
        ],
        "description": "AddFontAlias-Cria uma tabela de conversão de origens com a origem e o destino. Assim, se a origem de origem for utilizada em um objeto, o sistema automaticamente assume a origem ao destino. AddFontAlias(<cOrigem>,<cDestino>)"
    },
    "Beep": {
        "prefix": "Beep",
        "body": [
            "Beep()"
        ],
        "description": "Beep-Emite um sinal sonoro. Beep()"
    },
    "CSSDictAdd": {
        "prefix": "CSSDictAdd",
        "body": [
            "CSSDictAdd(${cObj},${cCSS})"
        ],
        "description": "CSSDictAdd-Define o CSS (Cascading Style Sheet) um padrão para um determinado objeto. CSSDictAdd(<cObj>,<cCSS>)"
    },
    "CopytoClipboard": {
        "prefix": "CopytoClipboard",
        "body": [
            "CopytoClipboard(${1:/*cTexto*/})"
        ],
        "description": "CopytoClipboard-Coloca um texto na área da estação de transferência. CopytoClipboard([cTexto])"
    },
    "GetClientDir": {
        "prefix": "GetClientDir",
        "body": [
            "GetClientDir()"
        ],
        "description": "GetClientDir-Retorna o caminho do diretório onde o Smart Client está instalado. GetClientDir()"
    },
    "GetFocus": {
        "prefix": "GetFocus",
        "body": [
            "GetFocus()"
        ],
        "description": "GetFocus-Retorna o handle do objeto em foco. GetFocus()"
    },
    "GetFontList": {
        "prefix": "GetFontList",
        "body": [
            "GetFontList()"
        ],
        "description": "GetFontList-Retorna um array com o nome das fontes que estão instaladas na estação que está usando o Smart Client. GetFontList()"
    },
    "GetFontPixWidths": {
        "prefix": "GetFontPixWidths",
        "body": [
            "GetFontPixWidths(${cFontName},${nTamanho},${1|.T.,.F.,/*lBold*/|},${2|.T.,.F.,/*lItalic*/|},${3|.T.,.F.,/*lUnderline*/|})"
        ],
        "description": "GetFontPixWidths-Retorna uma matriz com a largura em pixels de uma determinada fonte. GetFontPixWidths(<cFontName>,<nTamanho>,[lBold],[lItalic],[lUnderline])"
    },
    "GetHeightFont": {
        "prefix": "GetHeightFont",
        "body": [
            "GetHeightFont(${cFont},${nTamanho},${1|.T.,.F.,/*lnegrito*/|},${2|.T.,.F.,/*lItalico*/|},${3|.T.,.F.,/*lSublinhado*/|})"
        ],
        "description": "GetHeightFont-Retorna a altura da fonte desejada. GetHeightFont(<cFont>,<nTamanho>,[lnegrito],[lItalico],[lSublinhado])"
    },
    "GetResArray": {
        "prefix": "GetResArray",
        "body": [
            "GetResArray(${cMask})"
        ],
        "description": "GetResArray-Retorna um array com os recursos do repositório com base na busca por nome ou máscara. GetResArray(<cMask>)"
    },
    "getScreenRes": {
        "prefix": "getScreenRes",
        "body": [
            "getScreenRes()"
        ],
        "description": "getScreenRes-Recupera a resolução de tela da estação de trabalho. getScreenRes()"
    },
    "GetSenhAp": {
        "prefix": "GetSenhAp",
        "body": [
            "GetSenhAp(${cUser},${cPsw},${cServiceName})"
        ],
        "description": "GetSenhAp-Exibe a janela SenhaP para validação de senha. GetSenhAp(<cUser>,<cPsw>,<cServiceName>)"
    },
    "GetStringPixSize": {
        "prefix": "GetStringPixSize",
        "body": [
            "GetStringPixSize(${cString},${cFontName},${nTamanho},${1|.T.,.F.,/*lBold*/|},${2|.T.,.F.,/*lItalic*/|},${3|.T.,.F.,/*lUnderline*/|})"
        ],
        "description": "GetStringPixSize-Retorna uma matriz com a altura e a largura total em pixels de uma determinada string, dada uma fonte, tamanho e modificadores específicos (negrito, itálico, sublinhado). GetStringPixSize(<cString>,<cFontName>,<nTamanho>,[lBold],[lItalic],[lUnderline])"
    },
    "GetWndDefault": {
        "prefix": "GetWndDefault",
        "body": [
            "GetWndDefault()"
        ],
        "description": "GetWndDefault-Retorna a janela padrão na exibição. GetWndDefault()"
    },
    "IntIncProc": {
        "prefix": "IntIncProc",
        "body": [
            "IntIncProc(${1:/*cMsg*/})"
        ],
        "description": "IntIncProc-Incrementa e exibe um texto para uma régua de progresso. IntIncProc([cMsg])"
    },
    "ProcessMessage": {
        "prefix": "ProcessMessage",
        "body": [
            "ProcessMessage()"
        ],
        "description": "ProcessMessage-Minimiza o efeito de 'congelamento' do aplicativo durante a execução de um longo processo forçando a atualização do Smart Client. ProcessMessage()"
    },
    "PtGetSessions": {
        "prefix": "PtGetSessions",
        "body": [
            "PtGetSessions()"
        ],
        "description": "PtGetSessions-Retorna um array com a lista de sessões de conexão entre o Smart Client e o Application Server. PtGetSessions()"
    },
    "PtKillSession": {
        "prefix": "PtKillSession",
        "body": [
            "PtKillSession(${cSession})"
        ],
        "description": "PtKillSession-Encerra uma sessão de conexão entre o Smart Client e o Application Server. PtKillSession(<cSession>)"
    },
    "PtRunInSession": {
        "prefix": "PtRunInSession",
        "body": [
            "PtRunInSession(${cThread},${cFunction})"
        ],
        "description": "PtRunInSession-Executar um comando em uma determinada sessão. PtRunInSession(<cThread>,<cFunction>)"
    },
    "SetCSS": {
        "prefix": "SetCSS",
        "body": [
            "SetCSS(${1:cCSS}})"
        ],
        "description": "SetCSS-Define um CSS (Cascading Style Sheet) padrão que será utilizado na criação de componentes visuais, veja mais em: https://tdn.totvs.com/display/tec/SetCSS. SetKey(<cCSS>)"
    },
    "SetKey": {
        "prefix": "SetKey",
        "body": [
            "SetKey(${nCodInkey},${1:/*bAcao*/})"
        ],
        "description": "SetKey-Aloca um bloco de código para uma chave. SetKey(<nCodInkey>,[bAcao])"
    },
    "SetKeyBlock": {
        "prefix": "SetKeyBlock",
        "body": [
            "SetKeyBlock(${1:/*bBloco*/})"
        ],
        "description": "SetKeyBlock-Define um bloco de código que será executado sempre que a função SetKey() for chamada. SetKeyBlock([bBloco])"
    },
    "SetStyle-Interna": {
        "prefix": "SetStyle",
        "body": [
            "SetStyle(${nEstilo})"
        ],
        "description": "SetStyle-Define o estilo básico do Smart Client. SetStyle-Interna(<nEstilo>)"
    },
    "ShellExecute": {
        "prefix": "ShellExecute",
        "body": [
            "ShellExecute(${cAcao},${cArquivo},${cParam},${cDirTrabalho},${1:/*nOpc*/})"
        ],
        "description": "ShellExecute-Executa uma função, um arquivo ou qualquer execução na linha de comando no S.O. na estação onde o Smartclient está sendo executado. Esta função está disponível para Windows e Linux. ShellExecute(<cAcao>,<cArquivo>,<cParam>,<cDirTrabalho>,[nOpc])"
    },
    "Tone": {
        "prefix": "Tone",
        "body": [
            "Tone()"
        ],
        "description": "Tone-Retorna True se for efetivamente enviado o comando para o lado do cliente. Tone()"
    },
    "Arc4": {
        "prefix": "Arc4",
        "body": [
            "Arc4(${cBase},${cChave})"
        ],
        "description": "Arc4-Cria uma sequência de caracteres criptografada, utilizando o algoritmo de criptografia de fluxo ARC4, a partir de uma sequência de caracteres que compõe o dado a ser criptografado e uma sequência de caracteres adicional usada como base para a criptografia, chamada de chave. Arc4(<cBase>,<cChave>)"
    },
    "EVPDigest": {
        "prefix": "EVPDigest",
        "body": [
            "EVPDigest(${cContent},${nType})"
        ],
        "description": "EVPDigest-Calcula o valor de resumo de um determinado conteúdo. EVPDigest(<cContent>,<nType>)"
    },
    "EVPPrivSign": {
        "prefix": "EVPPrivSign",
        "body": [
            "EVPPrivSign(${cPathKey},${cContent},${nTipo},${cPassword},@${cErrStr})"
        ],
        "description": "EVPPrivSign-Assina usando algoritmo digest um determinado conteúdo usando uma chave privada. EVPPrivSign(<cPathKey>,<cContent>,<nTipo>,<cPassword>,<@cErrStr>)"
    },
    "EVPPrivVery": {
        "prefix": "EVPPrivVery",
        "body": [
            "EVPPrivVery(${cPathKey},${cContent},${nType},${cSigned},${cPassword},@${cErrStr})"
        ],
        "description": "EVPPrivVery-Verifica usando o algoritmo digest um determinado conteúdo usando uma chave pública. EVPPrivVery(<cPathKey>,<cContent>,<nType>,<cSigned>,<cPassword>,<@cErrStr>)"
    },
    "Embaralha": {
        "prefix": "Embaralha",
        "body": [
            "Embaralha(${cTexto},${nTipo})"
        ],
        "description": "Embaralha-Embaralha/Desembaralha uma string. Embaralha(<cTexto>,<nTipo>)"
    },
    "EncryptRSA": {
        "prefix": "EncryptRSA",
        "body": [
            "EncryptRSA(${cKeyFile},${cInfo},${1:/*uParam1*/})"
        ],
        "description": "EncryptRSA-Realiza a criptografia de uma string usando o algoritmo RSA (Ron Rivest, Adi Shamir e Len Adleman). EncryptRSA(<cKeyFile>,<cInfo>,[uParam1])"
    },
    "HMAC": {
        "prefix": "HMAC",
        "body": [
            "HMAC(${cContent},${cKey},${nCryptoType},${1:/*nRetType*/})"
        ],
        "description": "HMAC-HMAC (Hash-based Message Authentication Code) gera o hash de autenticação de uma mensagem de entrada, em combinação com uma chave secreta. Esta implementação suporta os algoritmos SHA-1,SHA-256,SHA-512 e MD5. HMAC(<cContent>,<cKey>,<nCryptoType>,[nRetType])"
    },
    "HSMExponent": {
        "prefix": "HSMExponent",
        "body": [
            "HSMExponent(${cKey},${2:/*cPass*/},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMExponent-Retorna o expoente (expoente) de uma chave privada no formato big-endian armazenado em um dispositivo HSM. HSMExponent(<cKey>,[cPass],[lClient])"
    },
    "HSMFinalize": {
        "prefix": "HSMFinalize",
        "body": [
            "HSMFinalize(${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMFinalize-Finaliza o uso do dispositivo HSM. HSMFinalize([lClient])"
    },
    "HSMGetCertFile": {
        "prefix": "HSMGetCertFile",
        "body": [
            "HSMGetCertFile(${cHSMPath},${cFile},${2:/*cPass*/},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMGetCertFile-Extrai um certificado armazenado em um dispositivo HSM para um arquivo. HSMGetCertFile(<cHSMPath>,<cFile>,[cPass],[lClient])"
    },
    "HSMGetKeyFile": {
        "prefix": "HSMGetKeyFile",
        "body": [
            "HSMGetKeyFile(${cHSMPath},${cFile},${3:/*cPass*/},${1|.T.,.F.,/*lChangeCase*/|},${2|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMGetKeyFile-Extrai uma chave pública armazenada em um dispositivo HSM para um arquivo. HSMGetKeyFile(<cHSMPath>,<cFile>,[cPass],[lChangeCase],[lClient])"
    },
    "HSMInitialize": {
        "prefix": "HSMInitialize",
        "body": [
            "HSMInitialize(${2:/*cModule*/},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMInitialize-Inicializa o dispositivo HSM. HSMInitialize([cModule],[lClient])"
    },
    "HSMModulus": {
        "prefix": "HSMModulus",
        "body": [
            "HSMModulus(${cKey},${2:/*cPass*/},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMModulus-Retorna o módulo público do módulo de uma chave privada no formato big-endian armazenado em um dispositivo HSM. HSMModulus(<cKey>,[cPass],[lClient])"
    },
    "HSMObjList": {
        "prefix": "HSMObjList",
        "body": [
            "HSMObjList(${nSlot},${cPass},${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMObjList-Liste os objetos contidos em um slot. HSMObjList(<nSlot>,<cPass>,[lClient])"
    },
    "HSMPrivSign": {
        "prefix": "HSMPrivSign",
        "body": [
            "HSMPrivSign(${cKey},${cContent},${nType},${cPass},@${2:/*cErrStr*/},@${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMPrivSign-Assina usando algoritmo de resumo um determinado conteúdo usando uma chave privada armazenada no dispositivo HSM. HSMPrivSign(<cKey>,<cContent>,<nType>,<cPass>,[@cErrStr],[lClient])"
    },
    "HSMPrivVery": {
        "prefix": "HSMPrivVery",
        "body": [
            "HSMPrivVery(${cKey},${cContent},${nTipo},@${cErrStr},@${cAssinado},@${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMPrivVery-Verifica a assinatura digital usando o certificado/chave pública armazenada no dispositivo HSM. HSMPrivVery(<cKey>,<cContent>,<nTipo>,<@cErrStr>,<cAssinado>,[lClient])"
    },
    "HSMSlotList": {
        "prefix": "HSMSlotList",
        "body": [
            "HSMSlotList(${1|.T.,.F.,/*lClient*/|})"
        ],
        "description": "HSMSlotList-Liste os slots HSM disponíveis. HSMSlotList([lClient])"
    },
    "HTTPSSLClient": {
        "prefix": "HTTPSSLClient",
        "body": [
            "HTTPSSLClient(${nSSL2},${nSSL3},${nTLS1},${cPassword},${cCertPath},${cKeyPath},${nHSM},${1|.T.,.F.,/*lClient*/|},${2/*nVerbose*/},${3/*nBugs*/},${4/*nState*/},${5/*cCACertPath*/})"
        ],
        "description": "HTTPSSLClient-Define na memória as configurações para conexão SSL. HTTPSSLClient(<nSSL2>,<nSSL3>,<nTLS1>,<cPassword>,<cCertPath>,<cKeyPath>,<nHSM>,[lClient],[nVerbose],[nBugs],[nState],[cCACertPath])"
    },
    "MD5": {
        "prefix": "MD5",
        "body": [
            "MD5(${cValor},${1:/*nType*/})"
        ],
        "description": "MD5-Aplicar a um conteúdo, o algoritmo MD5 (MessageDigest Algorithm 5). MD5(<cValor>,[nType])"
    },
    "MD5File": {
        "prefix": "MD5File",
        "body": [
            "MD5File(${cFile},${1:/*nTipo*/},${2:/*nWhere*/})"
        ],
        "description": "MD5File-Lê o conteúdo do arquivo especificado e, a partir deste arquivo, gera uma chave de hash usando MD5 - Message Digest Algorithm 5. MD5File(<cFile>,[nTipo],[nWhere])"
    },
    "PrivSignRSA": {
        "prefix": "PrivSignRSA",
        "body": [
            "PrivSignRSA(${cPathKey},${cContent},${nTipo},${cSenha},@${1:/*cErrStr*/},@${2:/*nPad*/})"
        ],
        "description": "PrivSignRSA-Assina um conteúdo específico usando a chave privada. PrivSignRSA(<cPathKey>,<cContent>,<nTipo>,<cSenha>,[@cErrStr],[nPad])"
    },
    "PrivVeryRSA": {
        "prefix": "PrivVeryRSA",
        "body": [
            "PrivVeryRSA(${cPathKey},${cContent},${nTipo},${cAssinatura},@${1:/*cErrStr*/},@${2:/*nPad*/})"
        ],
        "description": "PrivVeryRSA-Verifica um conteúdo assinado específico usando a chave pública. PrivVeryRSA(<cPathKey>,<cContent>,<nTipo>,<cAssinatura>,[@cErrStr],[nPad])"
    },
    "RC4Crypt": {
        "prefix": "RC4Crypt",
        "body": [
            "RC4Crypt(${cInput},${cKey},${1|.T.,.F.,/*lIsReturnASCII*/|},${2|.T.,.F.,/*lIsInputASCII*/|})"
        ],
        "description": "RC4Crypt-Criptografa e descriptografa uma determinada string usando o algoritmo RC4. RC4Crypt(<cInput>,<cKey>,[lIsReturnASCII],[lIsInputASCII])"
    },
    "RSAExponent": {
        "prefix": "RSAExponent",
        "body": [
            "RSAExponent(${cKey},${1|.T.,.F.,/*lPublic*/|},${2/*cPassword*/})"
        ],
        "description": "RSAExponent-Retorna o expoente (expoente) de uma chave no formato big-endian. RSAExponent(<cKey>,<lPublic>,[cPassword])"
    },
    "RSAModulus": {
        "prefix": "RSAModulus",
        "body": [
            "RSAModulus(${cKey},${1|.T.,.F.,/*lPublic*/|},${2/*cPassword*/})"
        ],
        "description": "RSAModulus-Retorna o módulo público do módulo de uma chave no formato big-endian. RSAModulus(<cKey>,<lPublic>,[cPassword])"
    },
    "SHA1": {
        "prefix": "SHA1",
        "body": [
            "SHA1(${cContent},${1:/*nRetType*/})"
        ],
        "description": "SHA1-SHA1 (Secure Hash Algorithm) gera o hash (ou resumo) de um conteúdo, com base no algoritmo definido no FIPS PUB 180-1 publicado em 17 de abril de 1995. SHA1(<cContent>,[nRetType])"
    },
    "SHA256": {
        "prefix": "SHA256",
        "body": [
            "SHA256(${cContent},${1:/*nRetType*/})"
        ],
        "description": "SHA256-SHA256 gera o hash (message digest) de uma mensagem de entrada, baseado no algoritmo SHA-256 da família SHA-2, definido no FIPS PUB 180-4, e publicado em 2001 pelo NIST. SHA256(<cContent>,[nRetType])"
    },
    "SHA512": {
        "prefix": "SHA512",
        "body": [
            "SHA512(${cContent},${1:/*nRetType*/})"
        ],
        "description": "SHA512-SHA512 gera o hash (message digest) de uma mensagem de entrada, baseado no algoritmo SHA-512 da família SHA-2, definido no FIPS PUB 180-4, e publicado em 2001 pelo NIST. SHA512(<cContent>,[nRetType])"
    },
    "SMIMESign": {
        "prefix": "SMIMESign",
        "body": [
            "SMIMESign(${cCert1},${cCert2},${cDados},${cOpcoes},@${cError},@${1:/*cSenha*/})"
        ],
        "description": "SMIMESign-It carrega a assinatura de mensagens S/MIME. SMIMESign(<cCert1>,<cCert2>,<cDados>,<cOpcoes>,<@cError>,[cSenha])"
    },
    "WebEncript": {
        "prefix": "WebEncript",
        "body": [
            "WebEncript(${cContent},${1|.T.,.F.,/*lDecript*/|},${2|.T.,.F.,/*lUseinjava*/|})"
        ],
        "description": "WebEncript-Realiza a criptografia ou descriptografia de um conteúdo, qualquer informado em <content>. WebEncript(<cContent>,[lDecript],[lUseinjava])"
    },
    "WriteRSAPK": {
        "prefix": "WriteRSAPK",
        "body": [
            "WriteRSAPK(${cDERFile},${cRSAFile},@${cError})"
        ],
        "description": "WriteRSAPK-Converte uma chave privada no formato DER (Distinguished Encoding Rules) para o formato PEM (Privacy Enhanced Mail) criptografando-a com o algoritmo RSA. WriteRSAPK(<cDERFile>,<cRSAFile>,<@cError>)"
    },
    "GetSslObj": {
        "prefix": "GetSslObj",
        "body": [
            "GetSslObj(${cId})"
        ],
        "description": "GetSslObj-Recupera um objeto de conexão de classe (SSL tSktSslConn), previamente armazenado, para ser utilizado na outra thread. GetSslObj(<cId>)"
    },
    "PEMInfo": {
        "prefix": "PEMInfo",
        "body": [
            "PEMInfo(${cFile},${1:/*cPassword*/})"
        ],
        "description": "PEMInfo-Extrai as informações referentes a um arquivo de certificados no formato .PEM (Privacy Enhanced Mail). PEMInfo(<cFile>,[cPassword])"
    },
    "PFXCA2PEM": {
        "prefix": "PFXCA2PEM",
        "body": [
            "PFXCA2PEM(${cPFXFile},${cPEMFile},@${cError},@${1:/*cPassword*/})"
        ],
        "description": "PFXCA2PEM-Extrai o certificado de autorização (Certificate Authorith) de um arquivo com a extensão formato .PFX (o padrão IIS - Internet Information Services), e gera como saída um arquivo no formato .PEM (Privacy Enhanced Mail). PFXCA2PEM(<cPFXFile>,<cPEMFile>,<@cError>,[cPassword])"
    },
    "PFXCert2PEM": {
        "prefix": "PFXCert2PEM",
        "body": [
            "PFXCert2PEM(${cPFXFile},${cPEMFile},@${cError},@${1:/*cPassword*/})"
        ],
        "description": "PFXCert2PEM-Extraia o certificado do cliente de um arquivo com o formato de extensão .PFX (o padrão IIS - Internet Information Services) e gera como saída um arquivo no formato .PEM (Privacy Enhanced Mail). PFXCert2PEM(<cPFXFile>,<cPEMFile>,<@cError>,[cPassword])"
    },
    "PFXInfo": {
        "prefix": "PFXInfo",
        "body": [
            "PFXInfo(${cFile},${1:/*cPassword*/})"
        ],
        "description": "PFXInfo-Extrai um arquivo com o formato .PFX de extensão (o padrão IIS - Serviços de Informações da Internet) informações sobre o certificado do cliente e os certificados de CA (Autoridade de Certificação). PFXInfo(<cFile>,[cPassword])"
    },
    "PFXKey2PEM": {
        "prefix": "PFXKey2PEM",
        "body": [
            "PFXKey2PEM(${cPFXFile},${cPEMFile},@${cError},@${1:/*cPassword*/})"
        ],
        "description": "PFXKey2PEM-Extrai a chave privada de um arquivo com o formato de extensão .PFX (o padrão IIS - Internet Information Services) e gera como saída um arquivo no formato .PEM (Privacy Enhanced Mail). PFXKey2PEM(<cPFXFile>,<cPEMFile>,<@cError>,[cPassword])"
    },
    "PK8Key2PEM": {
        "prefix": "PK8Key2PEM",
        "body": [
            "PK8Key2PEM(${cPK8File},${cPEMFile},@${cError},@${1:/*cPassword*/})"
        ],
        "description": "PK8Key2PEM-Converte uma chave privada para o formato PKCS#8 DER (Distinguished Encoding Rules) para o formato PEM (Privacy Enhanced Mail). PK8Key2PEM(<cPK8File>,<cPEMFile>,<@cError>,[cPassword])"
    },
    "SetSslObj": {
        "prefix": "SetSslObj",
        "body": [
            "SetSslObj(${cId},${oObjConn})"
        ],
        "description": "SetSslObj-Armazena um objeto de conexão de classe (SSL tSktSslConn) para poder ser usado em outra thread. SetSslObj(<cId>,<oObjConn>)"
    },
    "GlbLock": {
        "prefix": "GlbLock",
        "body": [
            "GlbLock()"
        ],
        "description": "GlbLock-Obtém um flag lock para operações de serialização, com escopo na instância atual do Protheus Server em execução, com release explícito através da função GlbUnlock(). If there is not a release explicit, there will be an automatic release of the lock at the end of the process (Thread) in execution who obtained the lock. GlbLock()"
    },
    "GlbNmLock": {
        "prefix": "GlbNmLock",
        "body": [
            "GlbNmLock(${cText})"
        ],
        "description": "GlbNmLock-Feito o bloqueio, um identificador chamado. GlbNmLock(<cText>)"
    },
    "GlbNmUnlock": {
        "prefix": "GlbNmUnlock",
        "body": [
            "GlbNmUnlock(${cText})"
        ],
        "description": "GlbNmUnlock-Libera um bloqueio de um identificador denominado obtido pela função GlbNmLock(). GlbNmUnlock(<cText>)"
    },
    "GlbUnlock": {
        "prefix": "GlbUnlock",
        "body": [
            "GlbUnlock()"
        ],
        "description": "GlbUnlock-Libera explicitamente o bloqueio de sinalizador para operações de serialização obtidas pelo processo atual por meio da função GlbLock(). GlbUnlock()"
    },
    "GetMailObj": {
        "prefix": "GetMailObj",
        "body": [
            "GetMailObj(${cID})"
        ],
        "description": "GetMailObj-Obtém o objeto de e-mail tMailManager, referente ao valor informado no parâmetro <cID>. GetMailObj(<cID>)"
    },
    "MailVersion": {
        "prefix": "MailVersion",
        "body": [
            "MailVersion()"
        ],
        "description": "MailVersion-Retorna uma string com a versão da implementação do servidor de e-mail. MailVersion()"
    },
    "SetMailObj": {
        "prefix": "SetMailObj",
        "body": [
            "SetMailObj(${cID},${oMailObj})"
        ],
        "description": "SetMailObj-Armazena ou exclui um objeto TMailManager na lista de objetos do servidor. SetMailObj(<cID>,<oMailObj>)"
    },
    "XmlC14N": {
        "prefix": "XmlC14N",
        "body": [
            "XmlC14N(${cXML},${cOption},@${cError},@${cWarning})"
        ],
        "description": "XmlC14N-Esta função permite aplicar o algoritmo canonicalization C14N na string que contém um XML. XmlC14N(<cXML>,<cOption>,<@cError>,<@cWarning>)"
    },
    "XmlC14NFile": {
        "prefix": "XmlC14NFile",
        "body": [
            "XmlC14NFile(${cFile},${cOption},@${cError},@${cWarning})"
        ],
        "description": "XmlC14NFile-Esta função permite aplicar o algoritmo canonicalization C14N em um arquivo que contém um XML. XmlC14NFile(<cFile>,<cOption>,<@cError>,<@cWarning>)"
    },
    "XmlChildEx": {
        "prefix": "XmlChildEx",
        "body": [
            "XmlChildEx(${oParent},${cProcura})"
        ],
        "description": "XmlChildEx-Retorna um ou mais nós da estrutura, de acordo com o nome do elemento procurado. XmlChildEx(<oParent>,<cProcura>)"
    },
    "XmlDelNode": {
        "prefix": "XmlDelNode",
        "body": [
            "XmlDelNode(${oParent},${cNode})"
        ],
        "description": "XmlDelNode-Exclui um nó de um objeto XML - the eXtensible Markup Language Language (extensible formatting). XmlDelNode(<oParent>,<cNode>)"
    },
    "XmlFVldSch": {
        "prefix": "XmlFVldSch",
        "body": [
            "XmlFVldSch(${cXML},${cXSD},${cError},${cWarning})"
        ],
        "description": "XmlFVldSch-Indica o arquivo XML que será validado. XmlFVldSch(<cXML>,<cXSD>,<cError>,<cWarning>)"
    },
    "XmlGetChild": {
        "prefix": "XmlGetChild",
        "body": [
            "XmlGetChild(${oParent},${nChild})"
        ],
        "description": "XmlGetChild-Retorna um elemento filho da estrutura. XmlGetChild(<oParent>,<nChild>)"
    },
    "XmlGetParent": {
        "prefix": "XmlGetParent",
        "body": [
            "XmlGetParent(${oNode})"
        ],
        "description": "XmlGetParent-Retorna um nó que representa o nó pai do elemento especificado pelo parâmetro. XmlGetParent(<oNode>)"
    },
    "XmlNewNode": {
        "prefix": "XmlNewNode",
        "body": [
            "XmlNewNode(${oParent},${cElementName},${cRealName},${cType})"
        ],
        "description": "XmlNewNode-Cria um novo nó de qualquer ponto no XML - the EXtensible Markup Language Language (extensible formatting). XmlNewNode(<oParent>,<cElementName>,<cRealName>,<cType>)"
    },
    "XmlNode2Arr": {
        "prefix": "XmlNode2Arr",
        "body": [
            "XmlNode2Arr(${oRoot},${cNode})"
        ],
        "description": "XmlNode2Arr-Transforma no array um objeto (nó) da estrutura do XML - the eXtensible Markup Language Language (extensible formatting). XmlNode2Arr(<oRoot>,<cNode>)"
    },
    "XmlParser": {
        "prefix": "XmlParser",
        "body": [
            "XmlParser(${cXml},${cReplace},@${cError},@${cWarning})"
        ],
        "description": "XmlParser-Retorna um objeto que possui uma estrutura XML, passada por parâmetro. XmlParser(<cXml>,<cReplace>,<@cError>,<@cWarning>)"
    },
    "XmlParserFile": {
        "prefix": "XmlParserFile",
        "body": [
            "XmlParserFile(${cFile},${cReplace},@${cError},@${cWarning})"
        ],
        "description": "XmlParserFile-Esta função permite retornar um objeto, que possui uma estrutura XML, recebido de um parâmetro de arquivo. XmlParserFile(<cFile>,<cReplace>,<@cError>,<@cWarning>)"
    },
    "XmlSVldSch": {
        "prefix": "XmlSVldSch",
        "body": [
            "XmlSVldSch(${cXML},${cSchemaPath},@${cError},@${cWarning})"
        ],
        "description": "XmlSVldSch-Executa a validação de uma string XML em um arquivo XSD (Schema). XmlSVldSch(<cXML>,<cSchemaPath>,<@cError>,<@cWarning>)"
    },
    "ACos": {
        "prefix": "ACos",
        "body": [
            "ACos(${nCos})"
        ],
        "description": "ACos-Calcula o valor em radianos do arco cosseno de um valor que representa o cosseno de um ângulo. ACos(<nCos>)"
    },
    "ASin": {
        "prefix": "ASin",
        "body": [
            "ASin(${nSin})"
        ],
        "description": "ASin-Retorna o valor em radianos do arco seno de um ângulo do valor que representa o seno desse ângulo. ASin(<nSin>)"
    },
    "ATan": {
        "prefix": "ATan",
        "body": [
            "ATan(${nTan})"
        ],
        "description": "ATan-Calcula o valor em radianos da tangente do arco de um valor que representa a tangente de um ângulo. ATan(<nTan>)"
    },
    "Atn2": {
        "prefix": "Atn2",
        "body": [
            "Atn2(${nSin},${nCos})"
        ],
        "description": "Atn2-Calcula o valor do ângulo, em radianos, de um valor que representa o seno e de um valor que representa o cosseno. Atn2(<nSin>,<nCos>)"
    },
    "Cos": {
        "prefix": "Cos",
        "body": [
            "Cos(${nAngle})"
        ],
        "description": "Cos-Calculates the cosine value of an angle (in radians). Cos(<nAngle>)"
    },
    "Sin": {
        "prefix": "Sin",
        "body": [
            "Sin(${nAngle})"
        ],
        "description": "Sin-Calcula o valor do seno de um ângulo (em radianos). Sin(<nAngle>)"
    },
    "Tan": {
        "prefix": "Tan",
        "body": [
            "Tan(${nAngle})"
        ],
        "description": "Tan-Calcula o valor da tangente de um ângulo (em radianos). Tan(<nAngle>)"
    },
    "AllwaysFalse": {
        "prefix": "AllwaysFalse",
        "body": [
            "AllwaysFalse()"
        ],
        "description": "AllwaysFalse-A função sempre retorna um valor false (.F.). AllwaysFalse()"
    },
    "AllwaysTrue": {
        "prefix": "AllwaysTrue",
        "body": [
            "AllwaysTrue()"
        ],
        "description": "AllwaysTrue-A função sempre retorna um valor true (.T.). AllwaysTrue()"
    },
    "Empty": {
        "prefix": "Empty",
        "body": [
            "Empty(${xExp})"
        ],
        "description": "Empty-Determina se o resultado de uma expressão está vazio. Empty(<xExp>)"
    },
    "ClearVarSetGet": {
        "prefix": "ClearVarSetGet",
        "body": [
            "ClearVarSetGet(${cNameVar})"
        ],
        "description": "ClearVarSetGet-Recue o bloco de código atribuído ao uso da variável, para que, quando a variável for usada, o bloco não seja mais executado. ClearVarSetGet(<cNameVar>)"
    },
    "VarRef": {
        "prefix": "VarRef",
        "body": [
            "VarRef(${cVarRefencia},${cVarRefenciada})"
        ],
        "description": "VarRef-Cria uma referência entre as duas variáveis. VarRef(<cVarRefencia>,<cVarRefenciada>)"
    },
    "VarSetGet": {
        "prefix": "VarSetGet",
        "body": [
            "VarSetGet(${cVariavel},${bBloco},${1|.T.,.F.,/*lApenasUpdate*/|})"
        ],
        "description": "VarSetGet-Permite associar um bloco de código a uma variável de programa do Advpl, onde o bloco de código será chamado quando a variável for acessada. VarSetGet(<cVariavel>,<bBloco>,[lApenasUpdate])"
    },
    "conttype": {
        "prefix": "conttype",
        "body": [
            "Conttype(${oObj})"
        ],
        "description": "conttype-Retorna um array com o tipo da variável. Diferente de ValType retorna o tipo original da variável. No caso de ADVPL pure sempre retornará o ValType (contetType - Variant), mas se for chamado com uma variável que veio de um 4GL (interop) retorna o tipo que foi criado. Conttype(<oObj>)"
    },
    "FWVetByDic": {
        "prefix": "FWVetByDic",
        "body": [
            "FWVetByDic(${aVetor},${cTable},/*${lItens}*/,/*${nCpoPos}*/)"
        ],
        "description": "FWVetByDic-Função ordenar um vetor conforme o dicionário para uso em, por exemplo, rotinas de MSExecAuto. FWVetByDic ( <aVetor>, <cTable>, [lItens], [nCpoPos]))"
    },
    "DateDiffDay": {
        "prefix": "DateDiffDay",
        "body": [
            "DateDiffDay(${Data1}, ${Data2})"
        ],
        "description": "Calcula a diferença de dias entre duas datas. DateDiffDay(<Data1>, <Data2>)"
    },
    "_SetOwnerPrvt": {
        "prefix": "_SetOwnerPrvt",
        "body": [
            "_SetOwnerPrvt('${1:cVar}',${2:xValue}"
        ],
        "description": "Cria uma variável private na função superior da pilha"
    },
    "_SetNamedPrvt": {
        "prefix": "_SetNamedPrvt",
        "body": [
            "_SetNamedPrvt('${1:cVar}',${2:xValue},'${3:cFuncOwner}')"
        ],
        "description": "Cria uma variável private em uma das funções superiores na pilha, nomeada no 3 parâmetro"
    },
}